{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libshlex-198f1573989e4705.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libshlex-198f1573989e4705.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.27","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.27/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcc-172d5359d8a43529.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcc-172d5359d8a43529.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/proc-macro2-dcc42af8043d1b71/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-d94afd1349fe509c.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-d94afd1349fe509c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/libc-8945669c97113b79/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#beef@0.5.2","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/beef-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"beef","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/beef-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libbeef-6b9ba8bcd9e0512a.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libbeef-6b9ba8bcd9e0512a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblazy_static-5d4e382b362514da.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblazy_static-5d4e382b362514da.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libregex_syntax-5c489ea248f92485.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libregex_syntax-5c489ea248f92485.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfnv-ef771e82bcb1e7ed.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfnv-ef771e82bcb1e7ed.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/proc-macro2-9fa72c21cbd3509a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-29e0f53105e5d56c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/stacker-436ce824a6259f10/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/libc-5e48ae4bf96360ff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfoldhash-a59add89a004a53d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libequivalent-1dcd00290bccfaaa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcfg_if-7aec9994c56eaf6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","stacker","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/chumsky-84fd284aa12e7343/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libproc_macro2-07a126034690c25b.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libproc_macro2-07a126034690c25b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","linked_libs":["static=psm_s"],"linked_paths":["native=/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-4c44ef300b378f41/out"],"cfgs":["asm","link_asm","switchable_stack"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-4c44ef300b378f41/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblibc-258ac6545f21b1ed.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/stacker-96f35f78109ffbf4/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liballocator_api2-5e2ec2acb3148297.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["CHUMSKY_REPO_URL","https://github.com/zesterer/chumsky/blob/1.0.0-alpha.8"]],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/chumsky-f5fe462a221274d8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_segmentation","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_segmentation-04eeabbffa9e83de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-a03aeb01a6179bb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libquote-4f84d764b08892be.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libquote-4f84d764b08892be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"psm","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libpsm-b9dd0dcc5f9f789f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allocator-api2","default","default-hasher","equivalent","inline-more","raw-entry"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libhashbrown-b8740ecf8c25a572.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.103","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.103/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.103/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","full","parsing","printing","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libsyn-62501ed9959384cf.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libsyn-62501ed9959384cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stacker","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libstacker-88dd06630dd7d22b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos-codegen@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-codegen-0.14.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"logos_codegen","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-codegen-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_codegen-7e794b3ccd55a6b2.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_codegen-7e794b3ccd55a6b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chumsky","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","stacker","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libchumsky-2948e7cd1ce8e360.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos-derive@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-derive-0.14.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"logos_derive","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-derive-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_derive-7c4b742a01f617ca.dylib"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-0.14.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"logos","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","export_derive","logos-derive","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos-1052a9a07bdd4702.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0106]: missing lifetime specifiers\n --> src/parser.rs:8:31\n  |\n8 | pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {\n  |                               ^                             ^ expected named lifetime parameter\n  |                               |\n  |                               expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\nhelp: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`\n  |\n8 | pub fn parser() -> impl Parser<'static, Token, Module, Error = Simple<'static, Token>> {\n  |                                ++++++++                               ++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"this function's return type contains a borrowed value, but there is no value for it to be borrowed from","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`","rendered":null,"spans":[{"byte_end":167,"byte_start":167,"column_end":32,"column_start":32,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"'static, ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":32,"highlight_start":32,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]},{"byte_end":197,"byte_start":197,"column_end":62,"column_start":62,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"'static, ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":62,"highlight_start":62,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]}]}],"code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","message":"missing lifetime specifiers","spans":[{"byte_end":167,"byte_start":166,"column_end":32,"column_start":31,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected named lifetime parameter","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":31,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]},{"byte_end":197,"byte_start":196,"column_end":62,"column_start":61,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected named lifetime parameter","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":61,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0603]: module `stream` is private\n  --> src/main.rs:10:14\n   |\n10 | use chumsky::stream::Stream;\n   |              ^^^^^^ private module\n   |\nnote: the module `stream` is defined here\n  --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:84:1\n   |\n84 | mod stream;\n   | ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the module `stream` is defined here","rendered":null,"spans":[{"byte_end":2388,"byte_start":2378,"column_end":11,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":null,"line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":1,"text":"mod stream;"}]}]}],"code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","message":"module `stream` is private","spans":[{"byte_end":120,"byte_start":114,"column_end":20,"column_start":14,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"private module","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"use chumsky::stream::Stream;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0220]: associated type `Error` not found for `chumsky::Parser`\n --> src/parser.rs:8:47\n  |\n8 | pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {\n  |                                               ^^^^^ associated type `Error` not found\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0220","explanation":"The associated type used was not defined in the trait.\n\nErroneous code example:\n\n```compile_fail,E0220\ntrait T1 {\n    type Bar;\n}\n\ntype Foo = T1<F=i32>; // error: associated type `F` not found for `T1`\n\n// or:\n\ntrait T2 {\n    type Bar;\n\n    // error: Baz is used but not declared\n    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\n}\n```\n\nMake sure that you have defined the associated type in the trait body.\nAlso, verify that you used the right trait or you didn't misspell the\nassociated type name. Example:\n\n```\ntrait T1 {\n    type Bar;\n}\n\ntype Foo = T1<Bar=i32>; // ok!\n\n// or:\n\ntrait T2 {\n    type Bar;\n    type Baz; // we declare `Baz` in our trait.\n\n    // and now we can use it here:\n    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\n}\n```\n"},"level":"error","message":"associated type `Error` not found for `chumsky::Parser`","spans":[{"byte_end":187,"byte_start":182,"column_end":52,"column_start":47,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"associated type `Error` not found","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":47,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this method takes 2 arguments but 1 argument was supplied\n    --> src/parser.rs:23:14\n     |\n23   |             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n     |              ^^^^^------------------------------------------------------------------- argument #2 is missing\n     |\nnote: method defined here\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1537:8\n     |\n1537 |     fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>\n     |        ^^^^^\nhelp: provide the argument\n     |\n23   -             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n23   +             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)), /* f */)\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":54418,"byte_start":54413,"column_end":13,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":null,"line_end":1537,"line_start":1537,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":8,"text":"    fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":858,"byte_start":791,"column_end":86,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)), /* f */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":86,"highlight_start":19,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 2 arguments but 1 argument was supplied","spans":[{"byte_end":858,"byte_start":791,"column_end":86,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"argument #2 is missing","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":19,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]},{"byte_end":791,"byte_start":786,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied\n    --> src/parser.rs:23:20\n     |\n23   |             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n     |              ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `IterParser<'src, I, O, E>`:\n               `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n               `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n               `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n               `OrNot<A>` implements `IterParser<'src, I, O, E>`\n               `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n               `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n               `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n               `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n             and 3 others\nnote: required by a bound in `foldl`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1540:12\n     |\n1537 |     fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>\n     |        ----- required by a bound in this associated function\n...\n1540 |         B: IterParser<'src, I, OB, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::foldl`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IterParser<'src, I, O, E>`:\n  `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n  `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n  `OrNot<A>` implements `IterParser<'src, I, O, E>`\n  `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n  `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n  `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\nand 3 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `foldl`","rendered":null,"spans":[{"byte_end":54418,"byte_start":54413,"column_end":13,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1537,"line_start":1537,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":8,"text":"    fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>"}]},{"byte_end":54553,"byte_start":54527,"column_end":38,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::foldl`","line_end":1540,"line_start":1540,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":12,"text":"        B: IterParser<'src, I, OB, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied","spans":[{"byte_end":857,"byte_start":792,"column_end":85,"column_start":20,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":20,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]},{"byte_end":791,"byte_start":786,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied\n   --> src/parser.rs:30:19\n    |\n30  |             .then(expr.clone())\n    |              ---- ^^^^^^^^^^^^ the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IterParser<'src, I, O, E>`:\n              `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n              `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n              `OrNot<A>` implements `IterParser<'src, I, O, E>`\n              `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n              `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n              `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n            and 3 others\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5132214925819663145.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IterParser<'src, I, O, E>`:\n  `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n  `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n  `OrNot<A>` implements `IterParser<'src, I, O, E>`\n  `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n  `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n  `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\nand 3 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5132214925819663145.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied","spans":[{"byte_end":1045,"byte_start":1033,"column_end":31,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":19,"text":"            .then(expr.clone())"}]},{"byte_end":1032,"byte_start":1028,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `then_ignore` exists for struct `Then<ThenIgnore<Labelled<Select<{closure@...}, _, ..., _>, ...>, ..., ..., _>, ..., ..., ..., _>`, but its trait bounds were not satisfied\n    --> src/parser.rs:31:14\n     |\n28   |           let assignment = ident\n     |  __________________________-\n29   | |             .then_ignore(just(Token::Assign))\n30   | |             .then(expr.clone())\n31   | |             .then_ignore(just(Token::Semicolon))\n     | |             -^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds\n     | |_____________|\n     |\n     |\n    ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:843:1\n     |\n843  |   pub struct Then<A, B, OA, OB, E> {\n     |   -------------------------------- doesn't satisfy `_: Parser<'_, _, (String, (Expr, ())), _>` or `_: Parser<'_, _, _, _>`\n...\n2428 |   pub struct Foldl<F, A, B, OB, E> {\n     |   -------------------------------- doesn't satisfy `_: Parser<'_, _, (Expr, ()), _>`\n     |\n     = note: the following trait bounds were not satisfied:\n             `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, (ast::Expr, ()), _>`\n             which is required by `Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, (String, (ast::Expr, ())), _>`\n             `Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `&Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, (ast::Expr, ()), _>`\nwhich is required by `Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, (String, (ast::Expr, ())), _>`\n`Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&Then<ThenIgnore<Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, Just<token::Token, _, _>, token::Token, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, String, (ast::Expr, ()), _>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `then_ignore` exists for struct `Then<ThenIgnore<Labelled<Select<{closure@...}, _, ..., _>, ...>, ..., ..., _>, ..., ..., ..., _>`, but its trait bounds were not satisfied","spans":[{"byte_end":1060,"byte_start":963,"column_end":14,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"","line_end":31,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"        let assignment = ident"},{"highlight_end":46,"highlight_start":1,"text":"            .then_ignore(just(Token::Assign))"},{"highlight_end":32,"highlight_start":1,"text":"            .then(expr.clone())"},{"highlight_end":14,"highlight_start":1,"text":"            .then_ignore(just(Token::Semicolon))"}]},{"byte_end":1071,"byte_start":1060,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Semicolon))"}]},{"byte_end":22307,"byte_start":22275,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, (String, (Expr, ())), _>` or `_: Parser<'_, _, _, _>`","line_end":843,"line_start":843,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Then<A, B, OA, OB, E> {"}]},{"byte_end":68408,"byte_start":68376,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, (Expr, ()), _>`","line_end":2428,"line_start":2428,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Foldl<F, A, B, OB, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied\n   --> src/parser.rs:35:26\n    |\n35  |             .ignore_then(expr.clone())\n    |              ----------- ^^^^^^^^^^^^ the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IterParser<'src, I, O, E>`:\n              `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n              `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n              `OrNot<A>` implements `IterParser<'src, I, O, E>`\n              `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n              `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n              `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n            and 3 others\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-433501390409347424.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IterParser<'src, I, O, E>`:\n  `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n  `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n  `OrNot<A>` implements `IterParser<'src, I, O, E>`\n  `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n  `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n  `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\nand 3 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-433501390409347424.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied","spans":[{"byte_end":1251,"byte_start":1239,"column_end":38,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"            .ignore_then(expr.clone())"}]},{"byte_end":1238,"byte_start":1227,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `then_ignore` exists for struct `IgnoreThen<Just<Token, _, _>, Foldl<_, Then<..., ..., ..., (), _>, ..., _, _>, ..., _>`, but its trait bounds were not satisfied\n    --> src/parser.rs:36:14\n     |\n34   |           let case_stmt = just(Token::Case)\n     |  _________________________-\n35   | |             .ignore_then(expr.clone())\n36   | |             .then_ignore(just(Token::Colon))\n     | |             -^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds\n     | |_____________|\n     |\n     |\n    ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:879:1\n     |\n879  |   pub struct IgnoreThen<A, B, OA, E> {\n     |   ---------------------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n...\n2428 |   pub struct Foldl<F, A, B, OB, E> {\n     |   -------------------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n     |\n     = note: the following trait bounds were not satisfied:\n             `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n             `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `&IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n`IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `then_ignore` exists for struct `IgnoreThen<Just<Token, _, _>, Foldl<_, Then<..., ..., ..., (), _>, ..., _, _>, ..., _>`, but its trait bounds were not satisfied","spans":[{"byte_end":1266,"byte_start":1196,"column_end":14,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"","line_end":36,"line_start":34,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":25,"text":"        let case_stmt = just(Token::Case)"},{"highlight_end":39,"highlight_start":1,"text":"            .ignore_then(expr.clone())"},{"highlight_end":14,"highlight_start":1,"text":"            .then_ignore(just(Token::Colon))"}]},{"byte_end":1277,"byte_start":1266,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Colon))"}]},{"byte_end":23337,"byte_start":23303,"column_end":35,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":879,"line_start":879,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":1,"text":"pub struct IgnoreThen<A, B, OA, E> {"}]},{"byte_end":68408,"byte_start":68376,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":2428,"line_start":2428,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Foldl<F, A, B, OB, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `delimited_by` exists for struct `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>`, but its trait bounds were not satisfied\n    --> src/parser.rs:46:39\n     |\n23   |             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n     |                    ---------------- doesn't satisfy `_: IterParser<'_, _, _, _>`\n...\n46   |             .ignore_then(expr.clone().delimited_by(just(Token::LParen), just(Token::RParen)))\n     |                                       ^^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds\n     |\n    ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:2428:1\n     |\n2428 | pub struct Foldl<F, A, B, OB, E> {\n     | -------------------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n     |\n     = note: the following trait bounds were not satisfied:\n             `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>`\n             which is required by `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n             `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `&Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>`\nwhich is required by `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n`Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `delimited_by` exists for struct `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>`, but its trait bounds were not satisfied","spans":[{"byte_end":1662,"byte_start":1650,"column_end":51,"column_start":39,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":39,"text":"            .ignore_then(expr.clone().delimited_by(just(Token::LParen), just(Token::RParen)))"}]},{"byte_end":808,"byte_start":792,"column_end":36,"column_start":20,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"doesn't satisfy `_: IterParser<'_, _, _, _>`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":20,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]},{"byte_end":68408,"byte_start":68376,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":2428,"line_start":2428,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Foldl<F, A, B, OB, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/parser.rs:66:65\n   |\n66 |                 direction: dir, is_reg: is_reg.is_some(), name, width\n   |                                                                 ^^^^^ expected `u32`, found `Token`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2680,"byte_start":2675,"column_end":70,"column_start":65,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `u32`, found `Token`","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":65,"text":"                direction: dir, is_reg: is_reg.is_some(), name, width"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0631]: type mismatch in function arguments\n   --> src/parser.rs:71:18\n    |\n71  |             .map(Declaration::Combinatorial);\n    |              --- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n    |              |\n    |              required by a bound introduced by this call\n    |\n   ::: src/ast.rs:23:5\n    |\n23  |     Combinatorial(Vec<Statement>),\n    |     ------------- found signature defined here\n    |\n    = note: expected function signature `fn(()) -> _`\n               found function signature `fn(Vec<ast::Statement>) -> _`\nnote: required by a bound in `chumsky::Parser::map`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:520:18\n    |\n520 |     fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>\n    |                  ^^^^^^^^^^ required by this bound in `Parser::map`\nhelp: consider wrapping the function in a closure\n    |\n71  |             .map(|arg0: ()| Declaration::Combinatorial(/* Vec<ast::Statement> */));\n    |                  ++++++++++                           +++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected function signature `fn(()) -> _`\n   found function signature `fn(Vec<ast::Statement>) -> _`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::Parser::map`","rendered":null,"spans":[{"byte_end":18990,"byte_start":18980,"column_end":28,"column_start":18,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::map`","line_end":520,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":18,"text":"    fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function in a closure","rendered":null,"spans":[{"byte_end":2878,"byte_start":2878,"column_end":18,"column_start":18,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":"|arg0: ()| ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":18,"text":"            .map(Declaration::Combinatorial);"}]},{"byte_end":2904,"byte_start":2904,"column_end":44,"column_start":44,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":"(/* Vec<ast::Statement> */)","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":44,"text":"            .map(Declaration::Combinatorial);"}]}]}],"code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","message":"type mismatch in function arguments","spans":[{"byte_end":2904,"byte_start":2878,"column_end":44,"column_start":18,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected due to this","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":18,"text":"            .map(Declaration::Combinatorial);"}]},{"byte_end":474,"byte_start":461,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/ast.rs","is_primary":false,"label":"found signature defined here","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Combinatorial(Vec<Statement>),"}]},{"byte_end":2877,"byte_start":2874,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(Declaration::Combinatorial);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied\n   --> src/parser.rs:78:48\n    |\n78  |                  just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))\n    |                                    ----------- ^^^^^^^^^^^^ the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`\n    |                                    |\n    |                                    required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IterParser<'src, I, O, E>`:\n              `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n              `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n              `OrNot<A>` implements `IterParser<'src, I, O, E>`\n              `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n              `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n              `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n              `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n            and 3 others\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3458194711825813344.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IterParser<'src, I, O, E>`:\n  `IgnoreWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `IterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\n  `MapWith<A, OA, F>` implements `IterParser<'src, I, O, E>`\n  `OrNot<A>` implements `IterParser<'src, I, O, E>`\n  `Repeated<A, O, I, E>` implements `IterParser<'src, I, O, E>`\n  `SeparatedBy<A, B, OA, OB, I, E>` implements `IterParser<'src, I, OA, E>`\n  `ThenWithCtx<A, B, OA, I, chumsky::extra::Full<<E as ParserExtra<'src, I>>::Error, <E as ParserExtra<'src, I>>::State, OA>>` implements `IterParser<'src, I, OB, E>`\n  `TryIterConfigure<A, F, O>` implements `IterParser<'src, I, O, E>`\nand 3 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, _, Expr, _>, ..., ..., (), _>, ..., _, _>` to implement `chumsky::Parser<'_, _, (ast::Expr, ()), _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3458194711825813344.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `{closure@src/parser.rs:23:20: 23:36}: IterParser<'_, _, _, _>` is not satisfied","spans":[{"byte_end":3266,"byte_start":3254,"column_end":60,"column_start":48,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `IterParser<'_, _, _, _>` is not implemented for closure `{closure@src/parser.rs:23:20: 23:36}`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":48,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]},{"byte_end":3253,"byte_start":3242,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `then_ignore` exists for struct `IgnoreThen<Just<Token, _, _>, Foldl<_, Then<..., ..., ..., (), _>, ..., _, _>, ..., _>`, but its trait bounds were not satisfied\n    --> src/parser.rs:78:62\n     |\n78   |                  just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))\n     |                                                              ^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds\n     |\n    ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:879:1\n     |\n879  | pub struct IgnoreThen<A, B, OA, E> {\n     | ---------------------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n...\n2428 | pub struct Foldl<F, A, B, OB, E> {\n     | -------------------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n     |\n     = note: the following trait bounds were not satisfied:\n             `Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n             `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n             which is required by `&IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\n`IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&IgnoreThen<Just<token::Token, _, _>, Foldl<_, Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, Repeated<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Op, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::Expr, _>, ast::Op, ast::Expr, _>, (ast::Op, ast::Expr), _, _>, ast::Expr, (), _>, {closure@src/parser.rs:23:20: 23:36}, _, _>, token::Token, _>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `then_ignore` exists for struct `IgnoreThen<Just<Token, _, _>, Foldl<_, Then<..., ..., ..., (), _>, ..., _, _>, ..., _>`, but its trait bounds were not satisfied","spans":[{"byte_end":3279,"byte_start":3268,"column_end":73,"column_start":62,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":62,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]},{"byte_end":23337,"byte_start":23303,"column_end":35,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":879,"line_start":879,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":1,"text":"pub struct IgnoreThen<A, B, OA, E> {"}]},{"byte_end":68408,"byte_start":68376,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":2428,"line_start":2428,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Foldl<F, A, B, OB, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0631]: type mismatch in function arguments\n    --> src/parser.rs:90:22\n     |\n90   |         port_decl.or(combinatorial_block).or(gen_if_block)\n     |                   -- ^^^^^^^^^^^^^^^^^^^ expected due to this\n     |                   |\n     |                   required by a bound introduced by this call\n     |\n    ::: src/ast.rs:23:5\n     |\n23   |     Combinatorial(Vec<Statement>),\n     |     ------------- found signature defined here\n     |\n     = note: expected function signature `fn(()) -> _`\n                found function signature `fn(Vec<ast::Statement>) -> _`\n     = note: required for `Map<IgnoreThen<Just<Token, _, _>, DelimitedBy<..., ..., ..., ..., ...>, ..., _>, (), ...>` to implement `chumsky::Parser<'_, _, ast::Declaration, _>`\nnote: required by a bound in `or`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1331:12\n     |\n1328 |     fn or<B>(self, other: B) -> Or<Self, B>\n     |        -- required by a bound in this associated function\n...\n1331 |         B: Parser<'src, I, O, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::or`\n     = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9132560808705833292.txt'\n     = note: consider using `--verbose` to print the full type name to the console\nhelp: consider wrapping the function in a closure\n     |\n90   |         port_decl.or(|arg0: ()| combinatorial_block(/* Vec<ast::Statement> */)).or(gen_if_block)\n     |                      ++++++++++                    +++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected function signature `fn(()) -> _`\n   found function signature `fn(Vec<ast::Statement>) -> _`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<IgnoreThen<Just<Token, _, _>, DelimitedBy<..., ..., ..., ..., ...>, ..., _>, (), ...>` to implement `chumsky::Parser<'_, _, ast::Declaration, _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or`","rendered":null,"spans":[{"byte_end":47361,"byte_start":47359,"column_end":10,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1328,"line_start":1328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":8,"text":"    fn or<B>(self, other: B) -> Or<Self, B>"}]},{"byte_end":47459,"byte_start":47438,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or`","line_end":1331,"line_start":1331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, O, E>,"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9132560808705833292.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function in a closure","rendered":null,"spans":[{"byte_end":3883,"byte_start":3883,"column_end":22,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":"|arg0: ()| ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":22,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]},{"byte_end":3902,"byte_start":3902,"column_end":41,"column_start":41,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":"(/* Vec<ast::Statement> */)","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":41,"highlight_start":41,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]}]}],"code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","message":"type mismatch in function arguments","spans":[{"byte_end":3902,"byte_start":3883,"column_end":41,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected due to this","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":22,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]},{"byte_end":474,"byte_start":461,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/ast.rs","is_primary":false,"label":"found signature defined here","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Combinatorial(Vec<Statement>),"}]},{"byte_end":3882,"byte_start":3880,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":19,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `or` exists for struct `Or<Map<ThenIgnore<Then<Then<..., ..., ..., ..., _>, ..., ..., ..., _>, ..., ..., _>, ..., ...>, ...>`, but its trait bounds were not satisfied\n    --> src/parser.rs:90:43\n     |\n90   |         port_decl.or(combinatorial_block).or(gen_if_block)\n     |                                           ^^ method cannot be called due to unsatisfied trait bounds\n     |\n    ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:267:1\n     |\n267  | pub struct Map<A, OA, F> {\n     | ------------------------ doesn't satisfy `_: Parser<'_, _, _, _>`\n...\n1297 | pub struct Or<A, B> {\n     | ------------------- doesn't satisfy `_: Parser<'_, _, _, _>`\n     |\n     = note: the following trait bounds were not satisfied:\n             `chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>: chumsky::Parser<'_, _, _, _>`\n             which is required by `Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`\n             `Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`\n             which is required by `&Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`\n`Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&Or<chumsky::combinator::Map<ThenIgnore<Then<Then<Then<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, ast::PortDirection, _>, token::Token, _>, OrNot<Just<token::Token, _, _>>, ast::PortDirection, Option<token::Token>, _>, Labelled<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, String, _>, &str>, (ast::PortDirection, Option<token::Token>), String, _>, IgnoreThen<IgnoreThen<Just<token::Token, _, _>, Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, _, u32, _>, token::Token, _>, Just<token::Token, _, _>, u32, _>, ((ast::PortDirection, Option<token::Token>), String), token::Token, _>, Just<token::Token, _, _>, token::Token, _>, (((ast::PortDirection, Option<token::Token>), String), token::Token), {closure@src/parser.rs:65:18: 65:50}>, chumsky::combinator::Map<IgnoreThen<Just<token::Token, _, _>, DelimitedBy<Repeated<Recursive<dyn chumsky::Parser<'_, _, _, _>>, _, _, _>, Just<token::Token, _, _>, Just<token::Token, _, _>, token::Token, token::Token>, token::Token, _>, (), fn(Vec<ast::Statement>) -> ast::Declaration {ast::Declaration::Combinatorial}>>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `or` exists for struct `Or<Map<ThenIgnore<Then<Then<..., ..., ..., ..., _>, ..., ..., ..., _>, ..., ..., _>, ..., ...>, ...>`, but its trait bounds were not satisfied","spans":[{"byte_end":3906,"byte_start":3904,"column_end":45,"column_start":43,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":43,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]},{"byte_end":7209,"byte_start":7185,"column_end":25,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":267,"line_start":267,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":1,"text":"pub struct Map<A, OA, F> {"}]},{"byte_end":34898,"byte_start":34879,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, _>`","line_end":1297,"line_start":1297,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"pub struct Or<A, B> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/parser.rs:97:52\n   |\n97 |         .map(|(name, declarations)| Module { name, declarations })\n   |                                                    ^^^^^^^^^^^^ expected `Vec<Declaration>`, found `()`\n   |\n   = note: expected struct `Vec<ast::Declaration>`\n           found unit type `()`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `Vec<ast::Declaration>`\nfound unit type `()`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4176,"byte_start":4164,"column_end":64,"column_start":52,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `Vec<Declaration>`, found `()`","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":52,"text":"        .map(|(name, declarations)| Module { name, declarations })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:9:55\n    |\n9   |     let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");\n    |                                                       ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `labelled`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::labelled`\n...\n870 |     fn labelled<L>(self, label: L) -> Labelled<Self, L>\n    |        -------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `labelled`","rendered":null,"spans":[{"byte_end":31255,"byte_start":31247,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":870,"line_start":870,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn labelled<L>(self, label: L) -> Labelled<Self, L>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::labelled`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":269,"byte_start":261,"column_end":63,"column_start":55,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":55,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n --> src/parser.rs:9:17\n  |\n9 |     let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");\n  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------- required by a bound introduced by this call\n  |                 |\n  |                 the trait `ValueInput<'_>` is not implemented for `token::Token`\n  |                 this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>`\n  |\n  = help: the following other types implement trait `ValueInput<'src>`:\n            `&'src Graphemes` implements `ValueInput<'src>`\n            `&'src [T; N]` implements `ValueInput<'src>`\n            `&'src [T]` implements `ValueInput<'src>`\n            `&'src str` implements `ValueInput<'src>`\n            `IoInput<R>` implements `ValueInput<'src>`\n            `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n            `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n            `Stream<I>` implements `ValueInput<'a>`\n            `WithContext<S, I>` implements `ValueInput<'src>`\n  = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n  = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n  = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":260,"byte_start":223,"column_end":54,"column_start":17,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":17,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]},{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":260,"byte_start":223,"column_end":54,"column_start":17,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":17,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]},{"byte_end":269,"byte_start":261,"column_end":63,"column_start":55,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":55,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:22:14\n    |\n22  |             .then(op.then(literal).repeated())\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":743,"byte_start":739,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:22:14\n   |\n22 |             .then(op.then(literal).repeated())\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":743,"byte_start":739,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:22:22\n    |\n22  |             .then(op.then(literal).repeated())\n    |                      ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":751,"byte_start":747,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:22:22\n   |\n22 |             .then(op.then(literal).repeated())\n   |                      ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":751,"byte_start":747,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:22:27\n    |\n22  |             .then(op.then(literal).repeated())\n    |                      ---- ^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |                      |\n    |                      required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":759,"byte_start":752,"column_end":34,"column_start":27,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":27,"text":"            .then(op.then(literal).repeated())"}]},{"byte_end":751,"byte_start":747,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:22:36\n     |\n22   |             .then(op.then(literal).repeated())\n     |                                    ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `repeated`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::repeated`\n...\n1461 |     fn repeated(self) -> Repeated<Self, O, I, E>\n     |        -------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `repeated`","rendered":null,"spans":[{"byte_end":51908,"byte_start":51900,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1461,"line_start":1461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn repeated(self) -> Repeated<Self, O, I, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::repeated`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":769,"byte_start":761,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:22:36\n   |\n22 |             .then(op.then(literal).repeated())\n   |                                    ^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Then<Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Op, ast::Expr)>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Op, ast::Expr)>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":769,"byte_start":761,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:22:19\n    |\n22  |             .then(op.then(literal).repeated())\n    |              ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`\n    = note: 2 redundant requirements hidden\n    = note: required for `Repeated<Then<Select<{closure@lib.rs:2884:13}, Token, Op, ...>, ..., ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Op, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Op>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Then<Select<{closure@lib.rs:2884:13}, Token, Op, ...>, ..., ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-991348704641557669.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":771,"byte_start":744,"column_end":46,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":19,"text":"            .then(op.then(literal).repeated())"}]},{"byte_end":743,"byte_start":739,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(op.then(literal).repeated())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:23:14\n     |\n23   |             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n     |              ^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `foldl`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::foldl`\n...\n1537 |     fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>\n     |        ----- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `foldl`","rendered":null,"spans":[{"byte_end":54418,"byte_start":54413,"column_end":13,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1537,"line_start":1537,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":8,"text":"    fn foldl<B, F, OB>(self, other: B, f: F) -> Foldl<F, Self, B, OB, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::foldl`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":791,"byte_start":786,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:23:14\n   |\n23 |             .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))\n   |              ^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Then<Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>, ..., ..., (), ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>, ..., ..., (), ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":791,"byte_start":786,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .foldl(|lhs, (op, rhs)| Expr::BinaryOp(Box::new(lhs), op, Box::new(rhs)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:27:21\n    |\n27  |       let statement = recursive(|stmt| {\n    |  _____________________^\n28  | |         let assignment = ident\n29  | |             .then_ignore(just(Token::Assign))\n30  | |             .then(expr.clone())\n...   |\n54  | |         assignment.or(switch)\n55  | |     });\n    | |______^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::recursive::recursive`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs:244:8\n    |\n242 | pub fn recursive<'src, 'b, I, O, E, A, F>(f: F) -> Recursive<Direct<'src, 'b, I, O, E>>\n    |        --------- required by a bound in this function\n243 | where\n244 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `recursive`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::recursive::recursive`","rendered":null,"spans":[{"byte_end":8217,"byte_start":8208,"column_end":17,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs","is_primary":false,"label":"required by a bound in this function","line_end":242,"line_start":242,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":8,"text":"pub fn recursive<'src, 'b, I, O, E, A, F>(f: F) -> Recursive<Direct<'src, 'b, I, O, E>>"}]},{"byte_end":8313,"byte_start":8302,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs","is_primary":true,"label":"required by this bound in `recursive`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2041,"byte_start":919,"column_end":7,"column_start":21,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":55,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":21,"text":"    let statement = recursive(|stmt| {"},{"highlight_end":31,"highlight_start":1,"text":"        let assignment = ident"},{"highlight_end":46,"highlight_start":1,"text":"            .then_ignore(just(Token::Assign))"},{"highlight_end":32,"highlight_start":1,"text":"            .then(expr.clone())"},{"highlight_end":49,"highlight_start":1,"text":"            .then_ignore(just(Token::Semicolon))"},{"highlight_end":75,"highlight_start":1,"text":"            .map(|(target, expr)| Statement::Assignment { target, expr });"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":42,"highlight_start":1,"text":"        let case_stmt = just(Token::Case)"},{"highlight_end":39,"highlight_start":1,"text":"            .ignore_then(expr.clone())"},{"highlight_end":45,"highlight_start":1,"text":"            .then_ignore(just(Token::Colon))"},{"highlight_end":32,"highlight_start":1,"text":"            .then(stmt.clone())"},{"highlight_end":67,"highlight_start":1,"text":"            .map(|(case_expr, stmt)| (case_expr, Box::new(stmt)));"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":48,"highlight_start":1,"text":"        let default_stmt = just(Token::Default)"},{"highlight_end":45,"highlight_start":1,"text":"            .ignore_then(just(Token::Colon))"},{"highlight_end":39,"highlight_start":1,"text":"            .ignore_then(stmt.clone())"},{"highlight_end":28,"highlight_start":1,"text":"            .map(Box::new);"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":41,"highlight_start":1,"text":"        let switch = just(Token::Switch)"},{"highlight_end":94,"highlight_start":1,"text":"            .ignore_then(expr.clone().delimited_by(just(Token::LParen), just(Token::RParen)))"},{"highlight_end":19,"highlight_start":1,"text":"            .then("},{"highlight_end":37,"highlight_start":1,"text":"                case_stmt.repeated()"},{"highlight_end":45,"highlight_start":1,"text":"                .then(default_stmt.or_not())"},{"highlight_end":72,"highlight_start":1,"text":"                .delimited_by(just(Token::LBrace), just(Token::RBrace))"},{"highlight_end":14,"highlight_start":1,"text":"            )"},{"highlight_end":103,"highlight_start":1,"text":"            .map(|(switch_expr, (cases, default))| Statement::Switch { switch_expr, cases, default });"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":30,"highlight_start":1,"text":"        assignment.or(switch)"},{"highlight_end":7,"highlight_start":1,"text":"    });"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:29:14\n    |\n29  |             .then_ignore(just(Token::Assign))\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n...\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35093,"byte_start":35082,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":993,"byte_start":982,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Assign))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:29:14\n   |\n29 |             .then_ignore(just(Token::Assign))\n   |              ^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":993,"byte_start":982,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Assign))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:29:26\n    |\n29  |             .then_ignore(just(Token::Assign))\n    |              ----------- ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:983:26\n    |\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35121,"byte_start":35100,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1013,"byte_start":994,"column_end":45,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":26,"text":"            .then_ignore(just(Token::Assign))"}]},{"byte_end":993,"byte_start":982,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Assign))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:30:14\n    |\n30  |             .then(expr.clone())\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1032,"byte_start":1028,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:30:14\n   |\n30 |             .then(expr.clone())\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 2 redundant requirements hidden\n   = note: required for `ThenIgnore<Labelled<Select<{closure@lib.rs:2884:13}, Token, String, ...>, ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `ThenIgnore<Labelled<Select<{closure@lib.rs:2884:13}, Token, String, ...>, ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":1032,"byte_start":1028,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:30:19\n    |\n30  |             .then(expr.clone())\n    |              ---- ^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\n    = note: 2 redundant requirements hidden\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":1045,"byte_start":1033,"column_end":31,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":19,"text":"            .then(expr.clone())"}]},{"byte_end":1032,"byte_start":1028,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:35:14\n    |\n35  |             .ignore_then(expr.clone())\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1238,"byte_start":1227,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:35:14\n   |\n35 |             .ignore_then(expr.clone())\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1238,"byte_start":1227,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:35:26\n    |\n35  |             .ignore_then(expr.clone())\n    |              ----------- ^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\n    = note: 2 redundant requirements hidden\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":1251,"byte_start":1239,"column_end":38,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"            .ignore_then(expr.clone())"}]},{"byte_end":1238,"byte_start":1227,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(expr.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:42:14\n    |\n42  |             .ignore_then(stmt.clone())\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1527,"byte_start":1516,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(stmt.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:42:14\n   |\n42 |             .ignore_then(stmt.clone())\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Just<Token, Token, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3898157156423082991.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Just<Token, Token, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3898157156423082991.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1527,"byte_start":1516,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(stmt.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:42:26\n    |\n42  |             .ignore_then(stmt.clone())\n    |              ----------- ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1540,"byte_start":1528,"column_end":38,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"            .ignore_then(stmt.clone())"}]},{"byte_end":1527,"byte_start":1516,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(stmt.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:43:14\n    |\n43  |             .map(Box::new);\n    |              ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::Parser::map`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::map`\n...\n520 |     fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>\n    |        --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::Parser::map`","rendered":null,"spans":[{"byte_end":18973,"byte_start":18970,"column_end":11,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":520,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":8,"text":"    fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::map`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1558,"byte_start":1555,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(Box::new);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:43:14\n   |\n43 |             .map(Box::new);\n   |              ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, _>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-16572547886193680593.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-16572547886193680593.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1558,"byte_start":1555,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(Box::new);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:49:36\n     |\n49   |                 .then(default_stmt.or_not())\n     |                                    ^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `or_not`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::or_not`\n...\n1359 |     fn or_not(self) -> OrNot<Self>\n     |        ------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or_not`","rendered":null,"spans":[{"byte_end":48382,"byte_start":48376,"column_end":14,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1359,"line_start":1359,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":8,"text":"    fn or_not(self) -> OrNot<Self>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or_not`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1803,"byte_start":1797,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":36,"text":"                .then(default_stmt.or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:49:36\n   |\n49 |                 .then(default_stmt.or_not())\n   |                                    ^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Map<IgnoreThen<IgnoreThen<Just<Token, Token, ...>, ..., ..., ...>, ..., ..., ...>, _, ...>` to implement `chumsky::Parser<'_, token::Token, Box<_>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-14840713715499869098.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<IgnoreThen<IgnoreThen<Just<Token, Token, ...>, ..., ..., ...>, ..., ..., ...>, _, ...>` to implement `chumsky::Parser<'_, token::Token, Box<_>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-14840713715499869098.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1803,"byte_start":1797,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":36,"text":"                .then(default_stmt.or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:58:23\n    |\n58  |       let declaration = recursive(|decl| {\n    |  _______________________^\n59  | |         let port_decl = just(Token::Port)\n60  | |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n61  | |             .then(just(Token::Reg).or_not())\n...   |\n90  | |         port_decl.or(combinatorial_block).or(gen_if_block)\n91  | |     });\n    | |______^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::recursive::recursive`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs:244:8\n    |\n242 | pub fn recursive<'src, 'b, I, O, E, A, F>(f: F) -> Recursive<Direct<'src, 'b, I, O, E>>\n    |        --------- required by a bound in this function\n243 | where\n244 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `recursive`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::recursive::recursive`","rendered":null,"spans":[{"byte_end":8217,"byte_start":8208,"column_end":17,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs","is_primary":false,"label":"required by a bound in this function","line_end":242,"line_start":242,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":8,"text":"pub fn recursive<'src, 'b, I, O, E, A, F>(f: F) -> Recursive<Direct<'src, 'b, I, O, E>>"}]},{"byte_end":8313,"byte_start":8302,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/recursive.rs","is_primary":true,"label":"required by this bound in `recursive`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3927,"byte_start":2118,"column_end":7,"column_start":23,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":91,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":23,"text":"    let declaration = recursive(|decl| {"},{"highlight_end":42,"highlight_start":1,"text":"        let port_decl = just(Token::Port)"},{"highlight_end":115,"highlight_start":1,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"},{"highlight_end":45,"highlight_start":1,"text":"            .then(just(Token::Reg).or_not())"},{"highlight_end":25,"highlight_start":1,"text":"            .then(ident)"},{"highlight_end":128,"highlight_start":1,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"},{"highlight_end":49,"highlight_start":1,"text":"            .then_ignore(just(Token::Semicolon))"},{"highlight_end":70,"highlight_start":1,"text":"            .map(|(((dir, is_reg), name), width)| Declaration::Port {"},{"highlight_end":70,"highlight_start":1,"text":"                direction: dir, is_reg: is_reg.is_some(), name, width"},{"highlight_end":16,"highlight_start":1,"text":"            });"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":61,"highlight_start":1,"text":"        let combinatorial_block = just(Token::Combinatorial)"},{"highlight_end":102,"highlight_start":1,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"},{"highlight_end":46,"highlight_start":1,"text":"            .map(Declaration::Combinatorial);"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":31,"highlight_start":1,"text":"        // Parsing di 'gen if'"},{"highlight_end":73,"highlight_start":1,"text":"        let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))"},{"highlight_end":87,"highlight_start":1,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"},{"highlight_end":19,"highlight_start":1,"text":"            .then("},{"highlight_end":88,"highlight_start":1,"text":"                // Un `gen if` può contenere solo `case` statement per questo prototipo"},{"highlight_end":93,"highlight_start":1,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"},{"highlight_end":41,"highlight_start":1,"text":"                .then(statement.clone())"},{"highlight_end":93,"highlight_start":1,"text":"                .map(|(case_expr, stmt)| Declaration::Combinatorial(vec![Statement::Switch {"},{"highlight_end":82,"highlight_start":1,"text":"                    switch_expr: Expr::Identifier(\"\".to_string()), // Placeholder"},{"highlight_end":62,"highlight_start":1,"text":"                    cases: vec![(case_expr, Box::new(stmt))],"},{"highlight_end":35,"highlight_start":1,"text":"                    default: None,"},{"highlight_end":21,"highlight_start":1,"text":"                }]))"},{"highlight_end":28,"highlight_start":1,"text":"                .repeated()"},{"highlight_end":72,"highlight_start":1,"text":"                .delimited_by(just(Token::LBrace), just(Token::RBrace))"},{"highlight_end":14,"highlight_start":1,"text":"            )"},{"highlight_end":105,"highlight_start":1,"text":"            .map(|(condition, declarations)| Declaration::ConditionalBlock { condition, declarations });"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":59,"highlight_start":1,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"},{"highlight_end":7,"highlight_start":1,"text":"    });"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:60:14\n    |\n60  |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2203,"byte_start":2192,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:60:14\n   |\n60 |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2203,"byte_start":2192,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:60:26\n    |\n60  |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n    |              ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |           |\n    |              |           the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |           this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>`\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2292,"byte_start":2204,"column_end":114,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":26,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]},{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2292,"byte_start":2204,"column_end":114,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":26,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]},{"byte_end":2203,"byte_start":2192,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:61:14\n    |\n61  |             .then(just(Token::Reg).or_not())\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2311,"byte_start":2307,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:61:14\n   |\n61 |             .then(just(Token::Reg).or_not())\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`\n   = note: 1 redundant requirement hidden\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Select<..., ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Select<..., ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2311,"byte_start":2307,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:61:19\n    |\n61  |             .then(just(Token::Reg).or_not())\n    |              ---- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `OrNot<Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>>` to implement `chumsky::Parser<'_, token::Token, Option<token::Token>>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `OrNot<Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>>` to implement `chumsky::Parser<'_, token::Token, Option<token::Token>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2337,"byte_start":2312,"column_end":44,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":19,"text":"            .then(just(Token::Reg).or_not())"}]},{"byte_end":2311,"byte_start":2307,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:62:14\n    |\n62  |             .then(ident)\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2356,"byte_start":2352,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:62:14\n   |\n62 |             .then(ident)\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`\n   = note: 2 redundant requirements hidden\n   = note: required for `Then<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (ast::PortDirection, Option<token::Token>)>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, PortDirection, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::PortDirection>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (ast::PortDirection, Option<token::Token>)>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-422900729321032542.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2356,"byte_start":2352,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:62:19\n    |\n62  |             .then(ident)\n    |              ---- ^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n    = note: 1 redundant requirement hidden\n    = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2362,"byte_start":2357,"column_end":24,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":19,"text":"            .then(ident)"}]},{"byte_end":2356,"byte_start":2352,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:63:14\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2381,"byte_start":2377,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:63:14\n   |\n63 |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 2 redundant requirements hidden\n   = note: required for `Then<Then<IgnoreThen<Just<Token, ..., ...>, ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ((ast::PortDirection, Option<token::Token>), String)>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<Then<IgnoreThen<Just<Token, ..., ...>, ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ((ast::PortDirection, Option<token::Token>), String)>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2381,"byte_start":2377,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:63:41\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |                                         ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2415,"byte_start":2404,"column_end":52,"column_start":41,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":41,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:63:41\n   |\n63 |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n   |                                         ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2415,"byte_start":2404,"column_end":52,"column_start":41,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":41,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:63:53\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |                                         ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                         |           |\n    |                                         |           the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |                                         |           this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>`\n    |                                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-1541165628654270503.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-1541165628654270503.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2454,"byte_start":2416,"column_end":91,"column_start":53,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":53,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]},{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2454,"byte_start":2416,"column_end":91,"column_start":53,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":53,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"this tail expression is of type `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]},{"byte_end":2415,"byte_start":2404,"column_end":52,"column_start":41,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":41,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:63:93\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |                                                                                             ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2467,"byte_start":2456,"column_end":104,"column_start":93,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":104,"highlight_start":93,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:63:93\n   |\n63 |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n   |                                                                                             ^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`\n   = note: 1 redundant requirement hidden\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Select<..., ..., u32, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, u32>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-1541165628654270503.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Select<..., ..., u32, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, u32>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-1541165628654270503.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2467,"byte_start":2456,"column_end":104,"column_start":93,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":104,"highlight_start":93,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:63:105\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |                                                                                             ----------- ^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |                                                                                             |\n    |                                                                                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2489,"byte_start":2468,"column_end":126,"column_start":105,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":126,"highlight_start":105,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]},{"byte_end":2467,"byte_start":2456,"column_end":104,"column_start":93,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":104,"highlight_start":93,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:63:19\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |              ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`\n    = note: 2 redundant requirements hidden\n    = note: required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., u32, ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-6904148623613448162.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, u32, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, u32>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., u32, ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-6904148623613448162.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2490,"byte_start":2382,"column_end":127,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":127,"highlight_start":19,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]},{"byte_end":2381,"byte_start":2377,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:64:14\n    |\n64  |             .then_ignore(just(Token::Semicolon))\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n...\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35093,"byte_start":35082,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2516,"byte_start":2505,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Semicolon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:64:14\n   |\n64 |             .then_ignore(just(Token::Semicolon))\n   |              ^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 3 redundant requirements hidden\n   = note: required for `Then<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (((ast::PortDirection, Option<token::Token>), String), token::Token)>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (((ast::PortDirection, Option<token::Token>), String), token::Token)>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2516,"byte_start":2505,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Semicolon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:64:26\n    |\n64  |             .then_ignore(just(Token::Semicolon))\n    |              ----------- ^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:983:26\n    |\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35121,"byte_start":35100,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2539,"byte_start":2517,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .then_ignore(just(Token::Semicolon))"}]},{"byte_end":2516,"byte_start":2505,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(Token::Semicolon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:65:14\n    |\n65  |             .map(|(((dir, is_reg), name), width)| Declaration::Port {\n    |              ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::Parser::map`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::map`\n...\n520 |     fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>\n    |        --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::Parser::map`","rendered":null,"spans":[{"byte_end":18973,"byte_start":18970,"column_end":11,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":520,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":8,"text":"    fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::map`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2557,"byte_start":2554,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(|(((dir, is_reg), name), width)| Declaration::Port {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:65:14\n   |\n65 |             .map(|(((dir, is_reg), name), width)| Declaration::Port {\n   |              ^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 4 redundant requirements hidden\n   = note: required for `ThenIgnore<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (((ast::PortDirection, Option<token::Token>), String), token::Token)>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"4 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `ThenIgnore<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, (((ast::PortDirection, Option<token::Token>), String), token::Token)>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":2557,"byte_start":2554,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(|(((dir, is_reg), name), width)| Declaration::Port {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:70:14\n    |\n70  |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2783,"byte_start":2772,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:70:14\n   |\n70 |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2783,"byte_start":2772,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:70:36\n     |\n70   |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                    ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `repeated`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::repeated`\n...\n1461 |     fn repeated(self) -> Repeated<Self, O, I, E>\n     |        -------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `repeated`","rendered":null,"spans":[{"byte_end":51908,"byte_start":51900,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1461,"line_start":1461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn repeated(self) -> Repeated<Self, O, I, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::repeated`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2802,"byte_start":2794,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:70:36\n   |\n70 |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |                                    ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2802,"byte_start":2794,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:70:47\n     |\n70   |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                               ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n...\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2817,"byte_start":2805,"column_end":59,"column_start":47,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":47,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:70:47\n   |\n70 |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |                                               ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Repeated<Recursive<dyn chumsky::Parser<'_, token::Token, _>>, _, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Recursive<dyn chumsky::Parser<'_, token::Token, _>>, _, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2817,"byte_start":2805,"column_end":59,"column_start":47,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":47,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:70:60\n     |\n70   |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                               ------------ ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                               |\n     |                                               required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1259:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1259 |         B: Parser<'src, I, U, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44791,"byte_start":44770,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1259,"line_start":1259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, U, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2837,"byte_start":2818,"column_end":79,"column_start":60,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":60,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":2817,"byte_start":2805,"column_end":59,"column_start":47,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":47,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:70:81\n     |\n70   |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                               ------------                      ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                               |\n     |                                               required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1260:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1260 |         C: Parser<'src, I, V, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44825,"byte_start":44804,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1260,"line_start":1260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        C: Parser<'src, I, V, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2858,"byte_start":2839,"column_end":100,"column_start":81,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":100,"highlight_start":81,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":2817,"byte_start":2805,"column_end":59,"column_start":47,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":47,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:70:26\n    |\n70  |             .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n    |              ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `DelimitedBy<Repeated<Recursive<dyn Parser<'_, Token, _>>, _, Token, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12548036473197311208.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `DelimitedBy<Repeated<Recursive<dyn Parser<'_, Token, _>>, _, Token, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12548036473197311208.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2859,"byte_start":2784,"column_end":101,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":101,"highlight_start":26,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":2783,"byte_start":2772,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(statement.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:71:14\n    |\n71  |             .map(Declaration::Combinatorial);\n    |              ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::Parser::map`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::map`\n...\n520 |     fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>\n    |        --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::Parser::map`","rendered":null,"spans":[{"byte_end":18973,"byte_start":18970,"column_end":11,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":520,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":8,"text":"    fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::map`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2877,"byte_start":2874,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(Declaration::Combinatorial);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:71:14\n   |\n71 |             .map(Declaration::Combinatorial);\n   |              ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8222726271127139323.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8222726271127139323.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2877,"byte_start":2874,"column_end":17,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":14,"text":"            .map(Declaration::Combinatorial);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:75:14\n    |\n75  |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3036,"byte_start":3025,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:75:14\n   |\n75 |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Just<Token, Token, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3898157156423082991.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Just<Token, Token, ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-3898157156423082991.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3036,"byte_start":3025,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:75:32\n     |\n75   |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n     |                                ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n...\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3055,"byte_start":3043,"column_end":44,"column_start":32,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":32,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:75:32\n   |\n75 |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n   |                                ^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":3055,"byte_start":3043,"column_end":44,"column_start":32,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":32,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:75:45\n     |\n75   |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n     |                                ------------ ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                |\n     |                                required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1259:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1259 |         B: Parser<'src, I, U, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44791,"byte_start":44770,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1259,"line_start":1259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, U, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3075,"byte_start":3056,"column_end":64,"column_start":45,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":45,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]},{"byte_end":3055,"byte_start":3043,"column_end":44,"column_start":32,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":32,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:75:66\n     |\n75   |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n     |                                ------------                      ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                |\n     |                                required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1260:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1260 |         C: Parser<'src, I, V, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44825,"byte_start":44804,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1260,"line_start":1260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        C: Parser<'src, I, V, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3096,"byte_start":3077,"column_end":85,"column_start":66,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":66,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]},{"byte_end":3055,"byte_start":3043,"column_end":44,"column_start":32,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":32,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:75:26\n    |\n75  |             .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))\n    |              ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n    = note: 2 redundant requirements hidden\n    = note: required for `DelimitedBy<Labelled<Select<{closure@lib.rs:2884:13}, Token, String, ...>, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `DelimitedBy<Labelled<Select<{closure@lib.rs:2884:13}, Token, String, ...>, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":3097,"byte_start":3037,"column_end":86,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":26,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]},{"byte_end":3036,"byte_start":3025,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(ident.delimited_by(just(Token::LParen), just(Token::RParen)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:76:14\n    |\n76  |             .then(\n    |              ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3116,"byte_start":3112,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:76:14\n   |\n76 |             .then(\n   |              ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 3 redundant requirements hidden\n   = note: required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":3116,"byte_start":3112,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:78:36\n    |\n78  |                  just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))\n    |                                    ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3253,"byte_start":3242,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:78:36\n   |\n78 |                  just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))\n   |                                    ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3253,"byte_start":3242,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:78:48\n    |\n78  |                  just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))\n    |                                    ----------- ^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |                                    |\n    |                                    required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`\n    = note: 2 redundant requirements hidden\n    = note: required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, Expr, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ast::Expr>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Foldl<_, Then<Select<{closure@lib.rs:2884:13}, Token, Expr, ...>, ..., ..., (), ...>, ..., _, ...>` to implement `chumsky::Parser<'_, token::Token, (ast::Expr, ())>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5601035076245647078.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":3266,"byte_start":3254,"column_end":60,"column_start":48,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":48,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]},{"byte_end":3253,"byte_start":3242,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"                 just(Token::Case).ignore_then(expr.clone()).then_ignore(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:90:19\n     |\n90   |         port_decl.or(combinatorial_block).or(gen_if_block)\n     |                   ^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `or`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::or`\n...\n1328 |     fn or<B>(self, other: B) -> Or<Self, B>\n     |        -- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or`","rendered":null,"spans":[{"byte_end":47361,"byte_start":47359,"column_end":10,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1328,"line_start":1328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":8,"text":"    fn or<B>(self, other: B) -> Or<Self, B>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3882,"byte_start":3880,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":19,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:90:19\n   |\n90 |         port_decl.or(combinatorial_block).or(gen_if_block)\n   |                   ^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 5 redundant requirements hidden\n   = note: required for `Map<ThenIgnore<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::Declaration>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"5 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<ThenIgnore<Then<Then<..., ..., ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::Declaration>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":3882,"byte_start":3880,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":19,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:90:22\n     |\n90   |         port_decl.or(combinatorial_block).or(gen_if_block)\n     |                   -- ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                   |\n     |                   required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Map<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, (), ...>` to implement `chumsky::Parser<'_, token::Token, ast::Declaration>`\nnote: required by a bound in `or`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1331:12\n     |\n1328 |     fn or<B>(self, other: B) -> Or<Self, B>\n     |        -- required by a bound in this associated function\n...\n1331 |         B: Parser<'src, I, O, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::or`\n     = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-4466481331993461110.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, (), ...>` to implement `chumsky::Parser<'_, token::Token, ast::Declaration>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or`","rendered":null,"spans":[{"byte_end":47361,"byte_start":47359,"column_end":10,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1328,"line_start":1328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":8,"text":"    fn or<B>(self, other: B) -> Or<Self, B>"}]},{"byte_end":47459,"byte_start":47438,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or`","line_end":1331,"line_start":1331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, O, E>,"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-4466481331993461110.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3902,"byte_start":3883,"column_end":41,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":22,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]},{"byte_end":3882,"byte_start":3880,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":19,"text":"        port_decl.or(combinatorial_block).or(gen_if_block)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:95:10\n    |\n95  |         .ignore_then(ident)\n    |          ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4012,"byte_start":4001,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .ignore_then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:95:10\n   |\n95 |         .ignore_then(ident)\n   |          ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4012,"byte_start":4001,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .ignore_then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n   --> src/parser.rs:95:22\n    |\n95  |         .ignore_then(ident)\n    |          ----------- ^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n    |          |\n    |          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `ValueInput<'src>`:\n              `&'src Graphemes` implements `ValueInput<'src>`\n              `&'src [T; N]` implements `ValueInput<'src>`\n              `&'src [T]` implements `ValueInput<'src>`\n              `&'src str` implements `ValueInput<'src>`\n              `IoInput<R>` implements `ValueInput<'src>`\n              `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n              `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n              `Stream<I>` implements `ValueInput<'a>`\n              `WithContext<S, I>` implements `ValueInput<'src>`\n    = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n    = note: 1 redundant requirement hidden\n    = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>, &str>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":4018,"byte_start":4013,"column_end":27,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"        .ignore_then(ident)"}]},{"byte_end":4012,"byte_start":4001,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .ignore_then(ident)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:96:10\n    |\n96  |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n    |          ^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4033,"byte_start":4029,"column_end":14,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":10,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:96:10\n   |\n96 |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |          ^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 2 redundant requirements hidden\n   = note: required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Labelled<..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, Labelled<..., ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":4033,"byte_start":4029,"column_end":14,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":10,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:96:27\n     |\n96   |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                           ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `repeated`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::repeated`\n...\n1461 |     fn repeated(self) -> Repeated<Self, O, I, E>\n     |        -------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `repeated`","rendered":null,"spans":[{"byte_end":51908,"byte_start":51900,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1461,"line_start":1461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn repeated(self) -> Repeated<Self, O, I, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::repeated`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4054,"byte_start":4046,"column_end":35,"column_start":27,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":27,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:96:27\n   |\n96 |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |                           ^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Recursive<dyn chumsky::Parser<'_, token::Token, _>>` to implement `chumsky::Parser<'_, token::Token, _>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4054,"byte_start":4046,"column_end":35,"column_start":27,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":27,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:96:38\n     |\n96   |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                      ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n...\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4069,"byte_start":4057,"column_end":50,"column_start":38,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":38,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:96:38\n   |\n96 |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n   |                                      ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Repeated<Recursive<dyn chumsky::Parser<'_, token::Token, _>>, _, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Recursive<dyn chumsky::Parser<'_, token::Token, _>>, _, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4069,"byte_start":4057,"column_end":50,"column_start":38,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":38,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:96:51\n     |\n96   |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                      ------------ ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                      |\n     |                                      required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1259:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1259 |         B: Parser<'src, I, U, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44791,"byte_start":44770,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1259,"line_start":1259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, U, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4089,"byte_start":4070,"column_end":70,"column_start":51,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":51,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":4069,"byte_start":4057,"column_end":50,"column_start":38,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":38,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:96:72\n     |\n96   |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n     |                                      ------------                      ^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |                                      |\n     |                                      required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\n     = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `delimited_by`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1260:12\n     |\n1256 |     fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>\n     |        ------------ required by a bound in this associated function\n...\n1260 |         C: Parser<'src, I, V, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::delimited_by`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delimited_by`","rendered":null,"spans":[{"byte_end":44658,"byte_start":44646,"column_end":20,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1256,"line_start":1256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"    fn delimited_by<U, V, B, C>(self, start: B, end: C) -> DelimitedBy<Self, B, C, U, V>"}]},{"byte_end":44825,"byte_start":44804,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::delimited_by`","line_end":1260,"line_start":1260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        C: Parser<'src, I, V, E>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4110,"byte_start":4091,"column_end":91,"column_start":72,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":72,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":4069,"byte_start":4057,"column_end":50,"column_start":38,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":38,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:96:15\n    |\n96  |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n    |          ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |          |\n    |          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `DelimitedBy<Repeated<Recursive<dyn Parser<'_, Token, _>>, _, Token, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n    = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15863100741466809932.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `DelimitedBy<Repeated<Recursive<dyn Parser<'_, Token, _>>, _, Token, ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15863100741466809932.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4111,"byte_start":4034,"column_end":92,"column_start":15,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":92,"highlight_start":15,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]},{"byte_end":4033,"byte_start":4029,"column_end":14,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":10,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:97:10\n    |\n97  |         .map(|(name, declarations)| Module { name, declarations })\n    |          ^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::Parser::map`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::map`\n...\n520 |     fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>\n    |        --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::Parser::map`","rendered":null,"spans":[{"byte_end":18973,"byte_start":18970,"column_end":11,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":520,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":8,"text":"    fn map<U, F: Fn(O) -> U>(self, f: F) -> Map<Self, O, F>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::map`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4125,"byte_start":4122,"column_end":13,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":10,"text":"        .map(|(name, declarations)| Module { name, declarations })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:97:10\n   |\n97 |         .map(|(name, declarations)| Module { name, declarations })\n   |          ^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 3 redundant requirements hidden\n   = note: required for `Then<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., (), ...>` to implement `chumsky::Parser<'_, token::Token, (String, ())>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<IgnoreThen<Just<Token, Token, Full<EmptyErr, (), ()>>, ..., ..., ...>, ..., ..., (), ...>` to implement `chumsky::Parser<'_, token::Token, (String, ())>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":4125,"byte_start":4122,"column_end":13,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":10,"text":"        .map(|(name, declarations)| Module { name, declarations })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:98:10\n    |\n98  |         .then_ignore(end())\n    |          ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n...\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35093,"byte_start":35082,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4200,"byte_start":4189,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .then_ignore(end())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:98:10\n   |\n98 |         .then_ignore(end())\n   |          ^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 4 redundant requirements hidden\n   = note: required for `Map<Then<IgnoreThen<Just<Token, Token, ...>, ..., ..., ...>, ..., ..., (), ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::Module>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"4 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<Then<IgnoreThen<Just<Token, Token, ...>, ..., ..., ...>, ..., ..., (), ...>, ..., ...>` to implement `chumsky::Parser<'_, token::Token, ast::Module>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":4200,"byte_start":4189,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .then_ignore(end())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:98:22\n    |\n98  |         .then_ignore(end())\n    |          ----------- ^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |          |\n    |          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `chumsky::primitive::End<token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`\nnote: required by a bound in `then_ignore`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:983:26\n    |\n983 |     fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then_ignore`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::primitive::End<token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, ()>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then_ignore`","rendered":null,"spans":[{"byte_end":35121,"byte_start":35100,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then_ignore`","line_end":983,"line_start":983,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn then_ignore<U, B: Parser<'src, I, U, E>>(self, other: B) -> ThenIgnore<Self, B, U, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":4206,"byte_start":4201,"column_end":27,"column_start":22,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"        .then_ignore(end())"}]},{"byte_end":4200,"byte_start":4189,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .then_ignore(end())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:9:64\n    |\n9   |     let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");\n    |                                                       -------- ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |                                                       |\n    |                                                       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `EmptyErr` to implement `LabelError<'_, token::Token, &str>`\nnote: required by a bound in `labelled`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:873:19\n    |\n870 |     fn labelled<L>(self, label: L) -> Labelled<Self, L>\n    |        -------- required by a bound in this associated function\n...\n873 |         E::Error: LabelError<'src, I, L>,\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::labelled`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `EmptyErr` to implement `LabelError<'_, token::Token, &str>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `labelled`","rendered":null,"spans":[{"byte_end":31255,"byte_start":31247,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":870,"line_start":870,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn labelled<L>(self, label: L) -> Labelled<Self, L>"}]},{"byte_end":31367,"byte_start":31345,"column_end":41,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::labelled`","line_end":873,"line_start":873,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":19,"text":"        E::Error: LabelError<'src, I, L>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":282,"byte_start":270,"column_end":76,"column_start":64,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":64,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]},{"byte_end":269,"byte_start":261,"column_end":63,"column_start":55,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":55,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:41:14\n    |\n41  |             .ignore_then(just(Token::Colon))\n    |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1482,"byte_start":1471,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:41:14\n   |\n41 |             .ignore_then(just(Token::Colon))\n   |              ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1482,"byte_start":1471,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:41:26\n    |\n41  |             .ignore_then(just(Token::Colon))\n    |              ----------- ^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":1501,"byte_start":1483,"column_end":44,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":26,"text":"            .ignore_then(just(Token::Colon))"}]},{"byte_end":1482,"byte_start":1471,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .ignore_then(just(Token::Colon))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n    --> src/parser.rs:61:36\n     |\n61   |             .then(just(Token::Reg).or_not())\n     |                                    ^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n     |\n     = help: the following other types implement trait `chumsky::input::Input<'src>`:\n               `&'src Graphemes` implements `chumsky::input::Input<'src>`\n               `&'src [T; N]` implements `chumsky::input::Input<'src>`\n               `&'src [T]` implements `chumsky::input::Input<'src>`\n               `&'src str` implements `chumsky::input::Input<'src>`\n               `IoInput<R>` implements `chumsky::input::Input<'src>`\n               `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n               `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n               `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n             and 2 others\nnote: required by a bound in `or_not`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                           ^^^^^^^^^^^ required by this bound in `Parser::or_not`\n...\n1359 |     fn or_not(self) -> OrNot<Self>\n     |        ------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or_not`","rendered":null,"spans":[{"byte_end":48382,"byte_start":48376,"column_end":14,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1359,"line_start":1359,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":8,"text":"    fn or_not(self) -> OrNot<Self>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or_not`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2335,"byte_start":2329,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":36,"text":"            .then(just(Token::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:61:36\n   |\n61 |             .then(just(Token::Reg).or_not())\n   |                                    ^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2335,"byte_start":2329,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":36,"text":"            .then(just(Token::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:74:45\n    |\n74  |         let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))\n    |                                             ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2994,"byte_start":2983,"column_end":56,"column_start":45,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":45,"text":"        let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:74:45\n   |\n74 |         let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))\n   |                                             ^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":2994,"byte_start":2983,"column_end":56,"column_start":45,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":45,"text":"        let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:74:57\n    |\n74  |         let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))\n    |                                             ----------- ^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |                                             |\n    |                                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\n    = note: required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:937:26\n    |\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |                          ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<token::Token, token::Token, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, token::Token>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33654,"byte_start":33633,"column_end":47,"column_start":26,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":3010,"byte_start":2995,"column_end":72,"column_start":57,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":57,"text":"        let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))"}]},{"byte_end":2994,"byte_start":2983,"column_end":56,"column_start":45,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":45,"text":"        let gen_if_block = just(Token::Gen).ignore_then(just(Token::If))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: ValueInput<'_>` is not satisfied\n  --> src/parser.rs:8:20\n   |\n8  |   pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ValueInput<'_>` is not implemented for `token::Token`\n...\n94 | /     just(Token::Module)\n95 | |         .ignore_then(ident)\n96 | |         .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))\n97 | |         .map(|(name, declarations)| Module { name, declarations })\n98 | |         .then_ignore(end())\n   | |___________________________- return type was inferred to be `ThenIgnore<Map<Then<IgnoreThen<..., ..., ..., _>, ..., ..., (), _>, ..., ...>, ..., (), _>` here\n   |\n   = help: the following other types implement trait `ValueInput<'src>`:\n             `&'src Graphemes` implements `ValueInput<'src>`\n             `&'src [T; N]` implements `ValueInput<'src>`\n             `&'src [T]` implements `ValueInput<'src>`\n             `&'src str` implements `ValueInput<'src>`\n             `IoInput<R>` implements `ValueInput<'src>`\n             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n             `Stream<I>` implements `ValueInput<'a>`\n             `WithContext<S, I>` implements `ValueInput<'src>`\n   = note: required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`\n   = note: 5 redundant requirements hidden\n   = note: required for `ThenIgnore<Map<Then<IgnoreThen<..., ..., ..., ...>, ..., ..., (), ...>, ..., ...>, ..., (), ...>` to implement `chumsky::Parser<'static, token::Token, ast::Module>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, Token, String, Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'_, token::Token, String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"5 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `ThenIgnore<Map<Then<IgnoreThen<..., ..., ..., ...>, ..., ..., (), ...>, ..., ...>, ..., (), ...>` to implement `chumsky::Parser<'static, token::Token, ast::Module>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12240932555487742814.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: ValueInput<'_>` is not satisfied","spans":[{"byte_end":204,"byte_start":155,"column_end":69,"column_start":20,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `impl Trait`","span":{"byte_end":204,"byte_start":155,"column_end":69,"column_start":20,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":20,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]}},"file_name":"src/parser.rs","is_primary":true,"label":"the trait `ValueInput<'_>` is not implemented for `token::Token`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":20,"text":"pub fn parser() -> impl Parser<Token, Module, Error = Simple<Token>> {"}]},{"byte_end":4207,"byte_start":3972,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"return type was inferred to be `ThenIgnore<Map<Then<IgnoreThen<..., ..., ..., _>, ..., ..., (), _>, ..., ...>, ..., (), _>` here","line_end":98,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":5,"text":"    just(Token::Module)"},{"highlight_end":28,"highlight_start":1,"text":"        .ignore_then(ident)"},{"highlight_end":93,"highlight_start":1,"text":"        .then(declaration.repeated().delimited_by(just(Token::LBrace), just(Token::RBrace)))"},{"highlight_end":67,"highlight_start":1,"text":"        .map(|(name, declarations)| Module { name, declarations })"},{"highlight_end":28,"highlight_start":1,"text":"        .then_ignore(end())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:9:17\n    |\n9   |     let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::primitive::select`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:446:8\n    |\n444 | pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\n    |              ------ required by a bound in this function\n445 | where\n446 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `select`\n    = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::primitive::select`","rendered":null,"spans":[{"byte_end":11681,"byte_start":11675,"column_end":20,"column_start":14,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"required by a bound in this function","line_end":444,"line_start":444,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>"}]},{"byte_end":11757,"byte_start":11746,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":true,"label":"required by this bound in `select`","line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":260,"byte_start":223,"column_end":54,"column_start":17,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":17,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:13:23\n    |\n13  |           let literal = select! {\n    |  _______________________^\n14  | |             Token::Identifier(s) => Expr::Identifier(s),\n15  | |             Token::BitVector(s) => Expr::Literal(s),\n16  | |         };\n    | |_________^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::primitive::select`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:446:8\n    |\n444 | pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\n    |              ------ required by a bound in this function\n445 | where\n446 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `select`\n    = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::primitive::select`","rendered":null,"spans":[{"byte_end":11681,"byte_start":11675,"column_end":20,"column_start":14,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"required by a bound in this function","line_end":444,"line_start":444,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>"}]},{"byte_end":11757,"byte_start":11746,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":true,"label":"required by this bound in `select`","line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":530,"byte_start":401,"column_end":10,"column_start":23,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":16,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":23,"text":"        let literal = select! {"},{"highlight_end":57,"highlight_start":1,"text":"            Token::Identifier(s) => Expr::Identifier(s),"},{"highlight_end":53,"highlight_start":1,"text":"            Token::BitVector(s) => Expr::Literal(s),"},{"highlight_end":10,"highlight_start":1,"text":"        };"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:17:18\n    |\n17  |           let op = select! {\n    |  __________________^\n18  | |             Token::Plus => Op::Plus, Token::Minus => Op::Minus,\n19  | |             Token::BitAnd => Op::BitAnd, Token::BitOr => Op::BitOr,\n20  | |         };\n    | |_________^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::primitive::select`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:446:8\n    |\n444 | pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\n    |              ------ required by a bound in this function\n445 | where\n446 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `select`\n    = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::primitive::select`","rendered":null,"spans":[{"byte_end":11681,"byte_start":11675,"column_end":20,"column_start":14,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"required by a bound in this function","line_end":444,"line_start":444,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>"}]},{"byte_end":11757,"byte_start":11746,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":true,"label":"required by this bound in `select`","line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":700,"byte_start":549,"column_end":10,"column_start":18,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":20,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":18,"text":"        let op = select! {"},{"highlight_end":64,"highlight_start":1,"text":"            Token::Plus => Op::Plus, Token::Minus => Op::Minus,"},{"highlight_end":68,"highlight_start":1,"text":"            Token::BitAnd => Op::BitAnd, Token::BitOr => Op::BitOr,"},{"highlight_end":10,"highlight_start":1,"text":"        };"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:60:26\n    |\n60  |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::primitive::select`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:446:8\n    |\n444 | pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\n    |              ------ required by a bound in this function\n445 | where\n446 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `select`\n    = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::primitive::select`","rendered":null,"spans":[{"byte_end":11681,"byte_start":11675,"column_end":20,"column_start":14,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"required by a bound in this function","line_end":444,"line_start":444,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>"}]},{"byte_end":11757,"byte_start":11746,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":true,"label":"required by this bound in `select`","line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2292,"byte_start":2204,"column_end":114,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":26,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/parser.rs:63:53\n    |\n63  |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `chumsky::primitive::select`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:446:8\n    |\n444 | pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\n    |              ------ required by a bound in this function\n445 | where\n446 |     I: Input<'src>,\n    |        ^^^^^^^^^^^ required by this bound in `select`\n    = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `chumsky::primitive::select`","rendered":null,"spans":[{"byte_end":11681,"byte_start":11675,"column_end":20,"column_start":14,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"required by a bound in this function","line_end":444,"line_start":444,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":14,"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>"}]},{"byte_end":11757,"byte_start":11746,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":true,"label":"required by this bound in `select`","line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    I: Input<'src>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2454,"byte_start":2416,"column_end":91,"column_start":53,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":53,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n --> src/parser.rs:9:17\n  |\n9 |     let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");\n  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n  |\n  = help: the following other types implement trait `chumsky::input::Input<'src>`:\n            `&'src Graphemes` implements `chumsky::input::Input<'src>`\n            `&'src [T; N]` implements `chumsky::input::Input<'src>`\n            `&'src [T]` implements `chumsky::input::Input<'src>`\n            `&'src str` implements `chumsky::input::Input<'src>`\n            `IoInput<R>` implements `chumsky::input::Input<'src>`\n            `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n            `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n            `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n          and 2 others\n  = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n  = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":260,"byte_start":223,"column_end":54,"column_start":17,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":17,"text":"    let ident = select! { Token::Identifier(s) => s }.labelled(\"identifier\");"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:13:23\n   |\n13 |           let literal = select! {\n   |  _______________________^\n14 | |             Token::Identifier(s) => Expr::Identifier(s),\n15 | |             Token::BitVector(s) => Expr::Literal(s),\n16 | |         };\n   | |_________^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":530,"byte_start":401,"column_end":10,"column_start":23,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":16,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":23,"text":"        let literal = select! {"},{"highlight_end":57,"highlight_start":1,"text":"            Token::Identifier(s) => Expr::Identifier(s),"},{"highlight_end":53,"highlight_start":1,"text":"            Token::BitVector(s) => Expr::Literal(s),"},{"highlight_end":10,"highlight_start":1,"text":"        };"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:17:18\n   |\n17 |           let op = select! {\n   |  __________________^\n18 | |             Token::Plus => Op::Plus, Token::Minus => Op::Minus,\n19 | |             Token::BitAnd => Op::BitAnd, Token::BitOr => Op::BitOr,\n20 | |         };\n   | |_________^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":700,"byte_start":549,"column_end":10,"column_start":18,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":20,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":18,"text":"        let op = select! {"},{"highlight_end":64,"highlight_start":1,"text":"            Token::Plus => Op::Plus, Token::Minus => Op::Minus,"},{"highlight_end":68,"highlight_start":1,"text":"            Token::BitAnd => Op::BitAnd, Token::BitOr => Op::BitOr,"},{"highlight_end":10,"highlight_start":1,"text":"        };"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:60:26\n   |\n60 |             .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2292,"byte_start":2204,"column_end":114,"column_start":26,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":114,"highlight_start":26,"text":"            .ignore_then(select! { Token::Input => PortDirection::Input, Token::Output => PortDirection::Output })"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/parser.rs:63:53\n   |\n63 |             .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))\n   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":2454,"byte_start":2416,"column_end":91,"column_start":53,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":53,"text":"            .then(just(Token::LBracket).ignore_then(select!{Token::Integer(i) => i as u32}).ignore_then(just(Token::RBracket)))"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n   --> src/main.rs:27:45\n    |\n27  |     let ast_result = parser::parser().parse(token_stream);\n    |                                       ----- ^^^^^^^^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n    |                                       |\n    |                                       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `chumsky::input::Input<'src>`:\n              `&'src Graphemes` implements `chumsky::input::Input<'src>`\n              `&'src [T; N]` implements `chumsky::input::Input<'src>`\n              `&'src [T]` implements `chumsky::input::Input<'src>`\n              `&'src str` implements `chumsky::input::Input<'src>`\n              `IoInput<R>` implements `chumsky::input::Input<'src>`\n              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n            and 2 others\nnote: required by a bound in `parse`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:27\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                           ^^^^^^^^^^^ required by this bound in `Parser::parse`\n...\n363 |     fn parse(&self, input: I) -> ParseResult<O, E::Error>\n    |        ----- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `parse`","rendered":null,"spans":[{"byte_end":13102,"byte_start":13097,"column_end":13,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":363,"line_start":363,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":8,"text":"    fn parse(&self, input: I) -> ParseResult<O, E::Error>"}]},{"byte_end":12183,"byte_start":12172,"column_end":38,"column_start":27,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::parse`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":788,"byte_start":776,"column_end":57,"column_start":45,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":45,"text":"    let ast_result = parser::parser().parse(token_stream);"}]},{"byte_end":775,"byte_start":770,"column_end":44,"column_start":39,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":39,"text":"    let ast_result = parser::parser().parse(token_stream);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied\n  --> src/main.rs:27:39\n   |\n27 |     let ast_result = parser::parser().parse(token_stream);\n   |                                       ^^^^^ the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`\n   |\n   = help: the following other types implement trait `chumsky::input::Input<'src>`:\n             `&'src Graphemes` implements `chumsky::input::Input<'src>`\n             `&'src [T; N]` implements `chumsky::input::Input<'src>`\n             `&'src [T]` implements `chumsky::input::Input<'src>`\n             `&'src str` implements `chumsky::input::Input<'src>`\n             `IoInput<R>` implements `chumsky::input::Input<'src>`\n             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\n           and 2 others\n   = note: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, token::Token>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `token::Token: chumsky::input::Input<'_>` is not satisfied","spans":[{"byte_end":775,"byte_start":770,"column_end":44,"column_start":39,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"the trait `chumsky::input::Input<'_>` is not implemented for `token::Token`","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":39,"text":"    let ast_result = parser::parser().parse(token_stream);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0106, E0220, E0277, E0308, E0599, E0603, E0631.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0106, E0220, E0277, E0308, E0599, E0603, E0631.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
{"reason":"build-finished","success":false}
