{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libshlex-198f1573989e4705.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libshlex-198f1573989e4705.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.27","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.27/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcc-172d5359d8a43529.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcc-172d5359d8a43529.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/proc-macro2-dcc42af8043d1b71/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-d94afd1349fe509c.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-d94afd1349fe509c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/libc-8945669c97113b79/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libregex_syntax-5c489ea248f92485.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libregex_syntax-5c489ea248f92485.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblazy_static-5d4e382b362514da.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblazy_static-5d4e382b362514da.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfnv-ef771e82bcb1e7ed.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfnv-ef771e82bcb1e7ed.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#beef@0.5.2","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/beef-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"beef","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/beef-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libbeef-6b9ba8bcd9e0512a.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libbeef-6b9ba8bcd9e0512a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/proc-macro2-9fa72c21cbd3509a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-29e0f53105e5d56c/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/libc-5e48ae4bf96360ff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/stacker-436ce824a6259f10/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liballocator_api2-5e2ec2acb3148297.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libequivalent-1dcd00290bccfaaa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libcfg_if-7aec9994c56eaf6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","stacker","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/chumsky-84fd284aa12e7343/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libproc_macro2-07a126034690c25b.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libproc_macro2-07a126034690c25b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","linked_libs":["static=psm_s"],"linked_paths":["native=/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-4c44ef300b378f41/out"],"cfgs":["asm","link_asm","switchable_stack"],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/psm-4c44ef300b378f41/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.173","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.173/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblibc-258ac6545f21b1ed.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/stacker-96f35f78109ffbf4/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libfoldhash-a59add89a004a53d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["CHUMSKY_REPO_URL","https://github.com/zesterer/chumsky/blob/1.0.0-alpha.8"]],"out_dir":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/build/chumsky-f5fe462a221274d8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_segmentation","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-segmentation-1.12.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_segmentation-04eeabbffa9e83de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libunicode_ident-a03aeb01a6179bb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libquote-4f84d764b08892be.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libquote-4f84d764b08892be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.26","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"psm","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/psm-0.1.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libpsm-b9dd0dcc5f9f789f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allocator-api2","default","default-hasher","equivalent","inline-more","raw-entry"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libhashbrown-b8740ecf8c25a572.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.103","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.103/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.103/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","full","parsing","printing","proc-macro"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libsyn-62501ed9959384cf.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libsyn-62501ed9959384cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.21","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stacker","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stacker-0.1.21/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libstacker-88dd06630dd7d22b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos-codegen@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-codegen-0.14.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"logos_codegen","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-codegen-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_codegen-7e794b3ccd55a6b2.rlib","/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_codegen-7e794b3ccd55a6b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chumsky@1.0.0-alpha.8","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chumsky","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","stacker","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/libchumsky-2948e7cd1ce8e360.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos-derive@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-derive-0.14.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"logos_derive","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-derive-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos_derive-7c4b742a01f617ca.dylib"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#logos@0.14.4","manifest_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-0.14.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"logos","src_path":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/logos-0.14.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","export_derive","logos-derive","std"],"filenames":["/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/liblogos-1052a9a07bdd4702.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `ariadne`\n --> src/main.rs:6:5\n  |\n6 | use ariadne::{Color, Fmt, Label, Report, ReportKind, Source};\n  |     ^^^^^^^ use of unresolved module or unlinked crate `ariadne`\n  |\n  = help: if you wanted to use a crate named `ariadne`, use `cargo add ariadne` to add it to your `Cargo.toml`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if you wanted to use a crate named `ariadne`, use `cargo add ariadne` to add it to your `Cargo.toml`","rendered":null,"spans":[]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `ariadne`","spans":[{"byte_end":137,"byte_start":130,"column_end":12,"column_start":5,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"use of unresolved module or unlinked crate `ariadne`","line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":5,"text":"use ariadne::{Color, Fmt, Label, Report, ReportKind, Source};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `crate::ast::Statement`\n --> src/codegen.rs:3:5\n  |\n3 | use crate::ast::Statement;\n  |     ^^^^^^^^^^^^^^^^^^^^^ no `Statement` in `ast`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `crate::ast::Statement`","spans":[{"byte_end":44,"byte_start":23,"column_end":26,"column_start":5,"expansion":null,"file_name":"src/codegen.rs","is_primary":true,"label":"no `Statement` in `ast`","line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"use crate::ast::Statement;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `Stream` in `chumsky`\n   --> src/main.rs:28:31\n    |\n28  |         let stream = chumsky::Stream::from_iter(tokens.into_iter())\n    |                               ^^^^^^ could not find `Stream` in `chumsky`\n    |\nnote: found an item that was configured out\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:157:57\n    |\n157 | use self::{extension::v1::*, primitive::custom, stream::Stream};\n    |                                                         ^^^^^^\nnote: the item is gated here\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:156:1\n    |\n156 | #[cfg(all(feature = \"extension\", doc))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider importing this struct\n    |\n1   + use chumsky::input::Stream;\n    |\nhelp: if you import `Stream`, refer to it directly\n    |\n28  -         let stream = chumsky::Stream::from_iter(tokens.into_iter())\n28  +         let stream = Stream::from_iter(tokens.into_iter())\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"found an item that was configured out","rendered":null,"spans":[{"byte_end":4467,"byte_start":4461,"column_end":63,"column_start":57,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":null,"line_end":157,"line_start":157,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":57,"text":"use self::{extension::v1::*, primitive::custom, stream::Stream};"}]}]},{"children":[],"code":null,"level":"note","message":"the item is gated here","rendered":null,"spans":[{"byte_end":4404,"byte_start":4365,"column_end":40,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":null,"line_end":156,"line_start":156,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":1,"text":"#[cfg(all(feature = \"extension\", doc))]"}]}]},{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use chumsky::input::Stream;\n","suggestion_applicability":"MaybeIncorrect","text":[]}]},{"children":[],"code":null,"level":"help","message":"if you import `Stream`, refer to it directly","rendered":null,"spans":[{"byte_end":861,"byte_start":852,"column_end":31,"column_start":22,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":31,"highlight_start":22,"text":"        let stream = chumsky::Stream::from_iter(tokens.into_iter())"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `Stream` in `chumsky`","spans":[{"byte_end":867,"byte_start":861,"column_end":37,"column_start":31,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"could not find `Stream` in `chumsky`","line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":31,"text":"        let stream = chumsky::Stream::from_iter(tokens.into_iter())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `VToken`\n  --> src/main.rs:14:39\n   |\n14 | use crate::token::{lexer, SimpleSpan, VToken};\n   |                                       ^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":313,"byte_start":305,"column_end":45,"column_start":37,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":37,"text":"use crate::token::{lexer, SimpleSpan, VToken};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `VToken`","spans":[{"byte_end":313,"byte_start":307,"column_end":45,"column_start":39,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":39,"text":"use crate::token::{lexer, SimpleSpan, VToken};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:17:5\n   |\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------- required by a bound introduced by this call\n   |     |\n   |     expected `VToken`, found `(VToken, SimpleSpan)`\n   |     this tail expression is of type `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'_, VToken>, (), ()>>`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-4742078711243681953.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-4742078711243681953.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":606,"byte_start":573,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]},{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":606,"byte_start":573,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"this tail expression is of type `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'_, VToken>, (), ()>>`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]},{"byte_end":615,"byte_start":607,"column_end":47,"column_start":39,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":39,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n   --> src/parser.rs:17:48\n    |\n17  |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n    |                                       -------- ^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n    |                                       |\n    |                                       required by a bound introduced by this call\n    |\n    = note: expected enum `VToken`\n              found tuple `(VToken, chumsky::span::SimpleSpan)`\nnote: required by a bound in `labelled`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:873:19\n    |\n870 |     fn labelled<L>(self, label: L) -> Labelled<Self, L>\n    |        -------- required by a bound in this associated function\n...\n873 |         E::Error: LabelError<'src, I, L>,\n    |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::labelled`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `labelled`","rendered":null,"spans":[{"byte_end":31255,"byte_start":31247,"column_end":16,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":870,"line_start":870,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":8,"text":"    fn labelled<L>(self, label: L) -> Labelled<Self, L>"}]},{"byte_end":31367,"byte_start":31345,"column_end":41,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::labelled`","line_end":873,"line_start":873,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":19,"text":"        E::Error: LabelError<'src, I, L>,"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":628,"byte_start":616,"column_end":60,"column_start":48,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":48,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]},{"byte_end":615,"byte_start":607,"column_end":47,"column_start":39,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":39,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:17:39\n   |\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |                                       ^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":615,"byte_start":607,"column_end":47,"column_start":39,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":39,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0631]: type mismatch in closure arguments\n  --> src/parser.rs:14:19\n   |\n14 | fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n...\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |     --------------------------------------------------------\n   |     |\n   |     found signature defined here\n   |     return type was inferred to be `Labelled<Select<{closure@lib.rs:2884:13}, _, String, _>, &str>` here\n   |\n   = note: expected closure signature `for<'b, 'c> fn((VToken, chumsky::span::SimpleSpan), &'b mut MapExtra<'_, 'c, &'a _, chumsky::extra::Full<chumsky::error::Rich<'a, _>, _, _>>) -> _`\n              found closure signature `fn(VToken, &mut MapExtra<'_, '_, &_, chumsky::extra::Full<chumsky::error::Rich<'_, _>, _, _>>) -> _`\n   = note: required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'a, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<..., (), ()>>, ...>` to implement `chumsky::Parser<'a, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5102998461990740352.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected closure signature `for<'b, 'c> fn((VToken, chumsky::span::SimpleSpan), &'b mut MapExtra<'_, 'c, &'a _, chumsky::extra::Full<chumsky::error::Rich<'a, _>, _, _>>) -> _`\n   found closure signature `fn(VToken, &mut MapExtra<'_, '_, &_, chumsky::extra::Full<chumsky::error::Rich<'_, _>, _, _>>) -> _`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<Rich<'a, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<..., (), ()>>, ...>` to implement `chumsky::Parser<'a, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-5102998461990740352.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","message":"type mismatch in closure arguments","spans":[{"byte_end":450,"byte_start":393,"column_end":76,"column_start":19,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `impl Trait`","span":{"byte_end":450,"byte_start":393,"column_end":76,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":19,"text":"fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {"}]}},"file_name":"src/parser.rs","is_primary":true,"label":"expected due to this","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":19,"text":"fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {"}]},{"byte_end":100860,"byte_start":100845,"column_end":28,"column_start":13,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":606,"byte_start":573,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"found signature defined here","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":13,"text":"            move |x, extra| match (x, extra) {"}]},{"byte_end":629,"byte_start":573,"column_end":61,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"return type was inferred to be `Labelled<Select<{closure@lib.rs:2884:13}, _, String, _>, &str>` here","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:14:19\n   |\n14 | fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n...\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |     -------------------------------------------------------- return type was inferred to be `Labelled<Select<{closure@lib.rs:2884:13}, _, String, _>, &str>` here\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>` to implement `ParserExtra<'_, &'a [(VToken, chumsky::span::SimpleSpan)]>`\n   = note: required for `Labelled<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<..., (), ()>>, ...>` to implement `chumsky::Parser<'a, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-10456187673841595236.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>` to implement `ParserExtra<'_, &'a [(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Labelled<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], String, Full<..., (), ()>>, ...>` to implement `chumsky::Parser<'a, &'a [(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'a, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-10456187673841595236.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":450,"byte_start":393,"column_end":76,"column_start":19,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `impl Trait`","span":{"byte_end":450,"byte_start":393,"column_end":76,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":19,"text":"fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {"}]}},"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":19,"text":"fn ident<'a>() -> impl Parser<'a, TokenStream<'a>, String, ParserError<'a>> {"}]},{"byte_end":629,"byte_start":573,"column_end":61,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"return type was inferred to be `Labelled<Select<{closure@lib.rs:2884:13}, _, String, _>, &str>` here","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:17:5\n   |\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":606,"byte_start":573,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:17:5\n   |\n17 |     select! { VToken::Ident(s) => s }.labelled(\"identifier\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":606,"byte_start":573,"column_end":38,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    select! { VToken::Ident(s) => s }.labelled(\"identifier\")"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:24:14\n   |\n24 |             .then(ident())\n   |              ^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<..., (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Then<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], (ast::PortDirection, Option<VToken>), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12888397294454305364.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<..., (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Then<Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], ..., ...>, ..., ..., ..., ...>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], (ast::PortDirection, Option<VToken>), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12888397294454305364.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":943,"byte_start":939,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(ident())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:22:25\n   |\n22 |         let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                         |\n   |                         expected `VToken`, found `(VToken, SimpleSpan)`\n   |                         this tail expression is of type `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<Rich<'_, VToken>, (), ()>>`\n23 |             .then(just(VToken::Reg).or_not())\n   |              ---- required by a bound introduced by this call\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<..., (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12888397294454305364.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<..., (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-12888397294454305364.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":879,"byte_start":789,"column_end":115,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":25,"text":"        let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }"}]},{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":879,"byte_start":789,"column_end":115,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":25,"text":"        let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"this tail expression is of type `Select<{closure@lib.rs:2884:13}, &[(VToken, SimpleSpan)], PortDirection, Full<Rich<'_, VToken>, (), ()>>`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]},{"byte_end":897,"byte_start":893,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(VToken::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n   --> src/parser.rs:23:19\n    |\n23  |             .then(just(VToken::Reg).or_not())\n    |              ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n    |              |\n    |              required by a bound introduced by this call\n    |\n    = note: expected enum `VToken`\n              found tuple `(VToken, chumsky::span::SimpleSpan)`\n    = note: required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n    = note: 1 redundant requirement hidden\n    = note: required for `OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:903:19\n    |\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |                   ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32419,"byte_start":32398,"column_end":40,"column_start":19,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":924,"byte_start":898,"column_end":45,"column_start":19,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":19,"text":"            .then(just(VToken::Reg).or_not())"}]},{"byte_end":897,"byte_start":893,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(VToken::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n   --> src/parser.rs:23:14\n    |\n23  |             .then(just(VToken::Reg).or_not())\n    |              ^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n    |\n    = note: expected enum `VToken`\n              found tuple `(VToken, chumsky::span::SimpleSpan)`\n    = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:46\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12211,"byte_start":12191,"column_end":66,"column_start":46,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":46,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":897,"byte_start":893,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(just(VToken::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n   --> src/parser.rs:24:14\n    |\n24  |             .then(ident())\n    |              ^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n    |\n    = note: expected enum `VToken`\n              found tuple `(VToken, chumsky::span::SimpleSpan)`\n    = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\nnote: required by a bound in `then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:46\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::then`\n...\n903 |     fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `then`","rendered":null,"spans":[{"byte_end":32391,"byte_start":32387,"column_end":12,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":903,"line_start":903,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn then<U, B: Parser<'src, I, U, E>>(self, other: B) -> Then<Self, B, O, U, E>"}]},{"byte_end":12211,"byte_start":12191,"column_end":66,"column_start":46,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":46,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":943,"byte_start":939,"column_end":18,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"            .then(ident())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:23:37\n   |\n23 |             .then(just(VToken::Reg).or_not())\n   |                                     ^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":922,"byte_start":916,"column_end":43,"column_start":37,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":37,"text":"            .then(just(VToken::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n    --> src/parser.rs:23:37\n     |\n23   |             .then(just(VToken::Reg).or_not())\n     |                                     ^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n     |\n     = note: expected enum `VToken`\n               found tuple `(VToken, chumsky::span::SimpleSpan)`\n     = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\nnote: required by a bound in `or_not`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:46\n     |\n345  | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n     |                                              ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::or_not`\n...\n1359 |     fn or_not(self) -> OrNot<Self>\n     |        ------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or_not`","rendered":null,"spans":[{"byte_end":48382,"byte_start":48376,"column_end":14,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1359,"line_start":1359,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":8,"text":"    fn or_not(self) -> OrNot<Self>"}]},{"byte_end":12211,"byte_start":12191,"column_end":66,"column_start":46,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or_not`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":46,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":922,"byte_start":916,"column_end":43,"column_start":37,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":37,"text":"            .then(just(VToken::Reg).or_not())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:22:25\n   |\n22 |         let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":101061,"byte_start":100806,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":879,"byte_start":789,"column_end":115,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":25,"text":"        let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":2888,"line_start":2883,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":9,"text":"        $crate::primitive::select("},{"highlight_end":47,"highlight_start":1,"text":"            move |x, extra| match (x, extra) {"},{"highlight_end":107,"highlight_start":1,"text":"                $(($p $(,$extra)?, ..) $(if $guard)? => ::core::option::Option::Some({ () $(;$out)? })),+,"},{"highlight_end":51,"highlight_start":1,"text":"                _ => ::core::option::Option::None,"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        )"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:22:25\n   |\n22 |         let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\n   = note: this error originates in the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":100859,"byte_start":100854,"column_end":27,"column_start":22,"expansion":{"def_site_span":{"byte_end":100710,"byte_start":100691,"column_end":20,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":null,"line_end":2881,"line_start":2881,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"macro_rules! select {"}]},"macro_decl_name":"select!","span":{"byte_end":879,"byte_start":789,"column_end":115,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":25,"text":"        let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }"}]}},"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":2884,"line_start":2884,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"            move |x, extra| match (x, extra) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `then_ignore` exists for struct `Then<Then<Select<{closure@...}, ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>`, but its trait bounds were not satisfied\n   --> src/parser.rs:25:14\n    |\n22  |           let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }\n    |  _________________________-\n23  | |             .then(just(VToken::Reg).or_not())\n24  | |             .then(ident())\n25  | |             .then_ignore(just(VToken::Semicolon))\n    | |             -^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds\n    | |_____________|\n    |\n    |\n   ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:843:1\n    |\n843 |   pub struct Then<A, B, OA, OB, E> {\n    |   -------------------------------- doesn't satisfy `_: Parser<'_, _, ((PortDirection, Option<VToken>), String), Full<Rich<'_, VToken>, (), ()>>`, `_: Parser<'_, _, (PortDirection, Option<VToken>), Full<Rich<'_, VToken>, (), ()>>` or `_: Parser<'_, _, _, _>`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, (ast::PortDirection, Option<VToken>), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n            which is required by `Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, ((ast::PortDirection, Option<VToken>), String), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n            `Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\n            which is required by `&Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, (ast::PortDirection, Option<VToken>), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\nwhich is required by `Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, ((ast::PortDirection, Option<VToken>), String), chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n`Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&Then<Then<Select<{closure@/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:2884:13: 2884:28}, &[(VToken, chumsky::span::SimpleSpan)], ast::PortDirection, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, OrNot<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>>, ast::PortDirection, Option<VToken>, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, (ast::PortDirection, Option<VToken>), String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `then_ignore` exists for struct `Then<Then<Select<{closure@...}, ..., ..., ...>, ..., ..., ..., ...>, ..., ..., ..., ...>`, but its trait bounds were not satisfied","spans":[{"byte_end":966,"byte_start":789,"column_end":14,"column_start":25,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"","line_end":25,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":25,"text":"        let port_decl = select! { VToken::Input => PortDirection::Input, VToken::Output => PortDirection::Output }"},{"highlight_end":46,"highlight_start":1,"text":"            .then(just(VToken::Reg).or_not())"},{"highlight_end":27,"highlight_start":1,"text":"            .then(ident())"},{"highlight_end":14,"highlight_start":1,"text":"            .then_ignore(just(VToken::Semicolon))"}]},{"byte_end":977,"byte_start":966,"column_end":25,"column_start":14,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"            .then_ignore(just(VToken::Semicolon))"}]},{"byte_end":22307,"byte_start":22275,"column_end":33,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, ((PortDirection, Option<VToken>), String), Full<Rich<'_, VToken>, (), ()>>`, `_: Parser<'_, _, (PortDirection, Option<VToken>), Full<Rich<'_, VToken>, (), ()>>` or `_: Parser<'_, _, _, _>`","line_end":843,"line_start":843,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":1,"text":"pub struct Then<A, B, OA, OB, E> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n  --> src/parser.rs:38:10\n   |\n38 |         .ignore_then(ident())\n   |          ^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n   |\n   = note: expected enum `VToken`\n             found tuple `(VToken, chumsky::span::SimpleSpan)`\n   = note: required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>` to implement `chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":1348,"byte_start":1337,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":38,"line_start":38,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .ignore_then(ident())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`\n   --> src/parser.rs:38:10\n    |\n38  |         .ignore_then(ident())\n    |          ^^^^^^^^^^^ expected `VToken`, found `(VToken, SimpleSpan)`\n    |\n    = note: expected enum `VToken`\n              found tuple `(VToken, chumsky::span::SimpleSpan)`\n    = note: required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`\nnote: required by a bound in `ignore_then`\n   --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:345:46\n    |\n345 | pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::ignore_then`\n...\n937 |     fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>\n    |        ----------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `VToken`\n  found tuple `(VToken, chumsky::span::SimpleSpan)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>` to implement `ParserExtra<'_, &[(VToken, chumsky::span::SimpleSpan)]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `ignore_then`","rendered":null,"spans":[{"byte_end":33626,"byte_start":33615,"column_end":19,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":937,"line_start":937,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":8,"text":"    fn ignore_then<U, B: Parser<'src, I, U, E>>(self, other: B) -> IgnoreThen<Self, B, O, E>"}]},{"byte_end":12211,"byte_start":12191,"column_end":66,"column_start":46,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::ignore_then`","line_end":345,"line_start":345,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":46,"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {"}]}]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&[(VToken, SimpleSpan)] as Input<'_>>::Token == VToken`","spans":[{"byte_end":1348,"byte_start":1337,"column_end":21,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"expected `VToken`, found `(VToken, SimpleSpan)`","line_end":38,"line_start":38,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":10,"text":"        .ignore_then(ident())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `then` exists for struct `IgnoreThen<Just<VToken, &[(VToken, SimpleSpan)], Full<Rich<'_, VToken>, (), ()>>, ..., ..., ...>`, but its trait bounds were not satisfied\n   --> src/parser.rs:39:10\n    |\n37  | /     just(VToken::Module)\n38  | |         .ignore_then(ident())\n39  | |         .then(declaration.repeated().collect::<Vec<_>>().delimited_by(just(VToken::LParen), just(VToken::RParen)))\n    | |         -^^^^ method cannot be called due to unsatisfied trait bounds\n    | |_________|\n    |\n    |\n   ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs:879:1\n    |\n879 |   pub struct IgnoreThen<A, B, OA, E> {\n    |   ---------------------------------- doesn't satisfy `_: Parser<'_, _, _, Full<Rich<'_, VToken>, (), ()>>` or `_: Parser<'_, _, _, _>`\n    |\n   ::: /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs:111:1\n    |\n111 |   pub struct Just<T, I, E = EmptyErr> {\n    |   ----------------------------------- doesn't satisfy `_: Parser<'_, _, VToken, Full<Rich<'_, VToken>, (), ()>>`\n    |\n    = note: the following trait bounds were not satisfied:\n            `Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n            which is required by `IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n            `IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\n            which is required by `&IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\nwhich is required by `IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>`\n`IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`\nwhich is required by `&IgnoreThen<Just<VToken, &[(VToken, chumsky::span::SimpleSpan)], chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, impl chumsky::Parser<'_, &[(VToken, chumsky::span::SimpleSpan)], String, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>, VToken, chumsky::extra::Full<chumsky::error::Rich<'_, VToken>, (), ()>>: chumsky::Parser<'_, _, _, _>`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `then` exists for struct `IgnoreThen<Just<VToken, &[(VToken, SimpleSpan)], Full<Rich<'_, VToken>, (), ()>>, ..., ..., ...>`, but its trait bounds were not satisfied","spans":[{"byte_end":1367,"byte_start":1307,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/parser.rs","is_primary":false,"label":"","line_end":39,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"    just(VToken::Module)"},{"highlight_end":30,"highlight_start":1,"text":"        .ignore_then(ident())"},{"highlight_end":10,"highlight_start":1,"text":"        .then(declaration.repeated().collect::<Vec<_>>().delimited_by(just(VToken::LParen), just(VToken::RParen)))"}]},{"byte_end":1371,"byte_start":1367,"column_end":14,"column_start":10,"expansion":null,"file_name":"src/parser.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":39,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":10,"text":"        .then(declaration.repeated().collect::<Vec<_>>().delimited_by(just(VToken::LParen), just(VToken::RParen)))"}]},{"byte_end":23337,"byte_start":23303,"column_end":35,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/combinator.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, _, Full<Rich<'_, VToken>, (), ()>>` or `_: Parser<'_, _, _, _>`","line_end":879,"line_start":879,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":1,"text":"pub struct IgnoreThen<A, B, OA, E> {"}]},{"byte_end":2985,"byte_start":2950,"column_end":36,"column_start":1,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/primitive.rs","is_primary":false,"label":"doesn't satisfy `_: Parser<'_, _, VToken, Full<Rich<'_, VToken>, (), ()>>`","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":1,"text":"pub struct Just<T, I, E = EmptyErr> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:16:31\n   |\n16 |     let ident = text::ident().map(|s: String| match s.as_str() {\n   |                               ^^^ expected `String`, found `&str`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":584,"byte_start":581,"column_end":34,"column_start":31,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":31,"text":"    let ident = text::ident().map(|s: String| match s.as_str() {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:26:32\n   |\n26 |     let number = text::int(10).map(VToken::Number);\n   |                                ^^^ expected `String`, found `&str`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1192,"byte_start":1189,"column_end":35,"column_start":32,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":32,"text":"    let number = text::int(10).map(VToken::Number);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n    --> src/token.rs:37:25\n     |\n37   |     let token = punc.or(ident).or(number);\n     |                      -- ^^^^^ expected `String`, found `&str`\n     |                      |\n     |                      required by a bound introduced by this call\n     |\n     = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\nnote: required by a bound in `or`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1331:12\n     |\n1328 |     fn or<B>(self, other: B) -> Or<Self, B>\n     |        -- required by a bound in this associated function\n...\n1331 |         B: Parser<'src, I, O, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::or`\n     = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-11680403957657091557.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or`","rendered":null,"spans":[{"byte_end":47361,"byte_start":47359,"column_end":10,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1328,"line_start":1328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":8,"text":"    fn or<B>(self, other: B) -> Or<Self, B>"}]},{"byte_end":47459,"byte_start":47438,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or`","line_end":1331,"line_start":1331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, O, E>,"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-11680403957657091557.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1817,"byte_start":1812,"column_end":30,"column_start":25,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":25,"text":"    let token = punc.or(ident).or(number);"}]},{"byte_end":1811,"byte_start":1809,"column_end":24,"column_start":22,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":22,"text":"    let token = punc.or(ident).or(number);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:37:32\n   |\n37 |     let token = punc.or(ident).or(number);\n   |                                ^^ expected `String`, found `&str`\n   |\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Or<Choice<...>, ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15037497582736308905.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Or<Choice<...>, ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15037497582736308905.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1821,"byte_start":1819,"column_end":34,"column_start":32,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":32,"text":"    let token = punc.or(ident).or(number);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n    --> src/token.rs:37:35\n     |\n37   |     let token = punc.or(ident).or(number);\n     |                                -- ^^^^^^ expected `String`, found `&str`\n     |                                |\n     |                                required by a bound introduced by this call\n     |\n     = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\nnote: required by a bound in `or`\n    --> /Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs:1331:12\n     |\n1328 |     fn or<B>(self, other: B) -> Or<Self, B>\n     |        -- required by a bound in this associated function\n...\n1331 |         B: Parser<'src, I, O, E>,\n     |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Parser::or`\n     = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8426760703235515186.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `or`","rendered":null,"spans":[{"byte_end":47361,"byte_start":47359,"column_end":10,"column_start":8,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":1328,"line_start":1328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":8,"text":"    fn or<B>(self, other: B) -> Or<Self, B>"}]},{"byte_end":47459,"byte_start":47438,"column_end":33,"column_start":12,"expansion":null,"file_name":"/Users/riccardo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-1.0.0-alpha.8/src/lib.rs","is_primary":true,"label":"required by this bound in `Parser::or`","line_end":1331,"line_start":1331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"        B: Parser<'src, I, O, E>,"}]}]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8426760703235515186.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1828,"byte_start":1822,"column_end":41,"column_start":35,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":35,"text":"    let token = punc.or(ident).or(number);"}]},{"byte_end":1821,"byte_start":1819,"column_end":34,"column_start":32,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":32,"text":"    let token = punc.or(ident).or(number);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:40:10\n   |\n40 |         .map_with(|tok, e| (tok, e.span()))\n   |          ^^^^^^^^ expected `String`, found `&str`\n   |\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Or<Or<Choice<...>, ...>, ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8514092303708294275.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Or<Or<Choice<...>, ...>, ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-8514092303708294275.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1859,"byte_start":1851,"column_end":18,"column_start":10,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":40,"line_start":40,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":10,"text":"        .map_with(|tok, e| (tok, e.span()))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:41:10\n   |\n41 |         .padded()\n   |          ^^^^^^ expected `String`, found `&str`\n   |\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 2 redundant requirements hidden\n   = note: required for `MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9025211051508940394.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"2 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9025211051508940394.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1901,"byte_start":1895,"column_end":16,"column_start":10,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":10,"text":"        .padded()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:42:10\n   |\n42 |         .repeated()\n   |          ^^^^^^^^ expected `String`, found `&str`\n   |\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 3 redundant requirements hidden\n   = note: required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9475834476312001838.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-9475834476312001838.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1921,"byte_start":1913,"column_end":18,"column_start":10,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":10,"text":"        .repeated()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0271]: type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`\n  --> src/token.rs:43:10\n   |\n43 |         .collect()\n   |          ^^^^^^^ expected `String`, found `&str`\n   |\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 3 redundant requirements hidden\n   = note: required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15309815077290278192.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-15309815077290278192.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"type mismatch resolving `<&str as SliceInput<'_>>::Slice == String`","spans":[{"byte_end":1940,"byte_start":1933,"column_end":17,"column_start":10,"expansion":null,"file_name":"src/token.rs","is_primary":true,"label":"expected `String`, found `&str`","line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":10,"text":"        .collect()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, ...> + Copy: Parser<'_, ..., ..., ...>` is not satisfied\n  --> src/token.rs:15:23\n   |\n15 |   pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound\n...\n39 | /     token\n40 | |         .map_with(|tok, e| (tok, e.span()))\n41 | |         .padded()\n42 | |         .repeated()\n43 | |         .collect()\n   | |__________________- return type was inferred to be `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., _, _>, ..., _>` here\n   |\n   = help: the trait `chumsky::Parser<'_, &'a str, String, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>` is not implemented for `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<Rich<'a, char>, (), ()>> + Copy`\n   = help: the following other types implement trait `chumsky::Parser<'src, I, O, E>`:\n             `&T` implements `chumsky::Parser<'src, I, O, E>`\n             `AndIs<A, B, OB>` implements `chumsky::Parser<'src, I, OA, E>`\n             `AnyRef<I, E>` implements `chumsky::Parser<'src, I, &'src <I as chumsky::input::Input<'src>>::Token, E>`\n             `Arc<T>` implements `chumsky::Parser<'src, I, O, E>`\n             `Box<T>` implements `chumsky::Parser<'src, I, O, E>`\n             `Boxed<'src, '_, I, O, E>` implements `chumsky::Parser<'src, I, O, E>`\n             `Choice<&[A]>` implements `chumsky::Parser<'src, I, O, E>`\n             `Choice<(A_, B_, C_, D_, E_, F_, G_, H_, I_, J_, K_, L_, M_, N_, O_, P_, Q_, R_, S_, T_, U_, V_, W_, X_, Y_, Z_)>` implements `chumsky::Parser<'src, I, O, E>`\n           and 110 others\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 3 redundant requirements hidden\n   = note: required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'a, &'a str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-14649946050272260555.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `chumsky::Parser<'_, &'a str, String, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>` is not implemented for `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<Rich<'a, char>, (), ()>> + Copy`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::Parser<'src, I, O, E>`:\n  `&T` implements `chumsky::Parser<'src, I, O, E>`\n  `AndIs<A, B, OB>` implements `chumsky::Parser<'src, I, OA, E>`\n  `AnyRef<I, E>` implements `chumsky::Parser<'src, I, &'src <I as chumsky::input::Input<'src>>::Token, E>`\n  `Arc<T>` implements `chumsky::Parser<'src, I, O, E>`\n  `Box<T>` implements `chumsky::Parser<'src, I, O, E>`\n  `Boxed<'src, '_, I, O, E>` implements `chumsky::Parser<'src, I, O, E>`\n  `Choice<&[A]>` implements `chumsky::Parser<'src, I, O, E>`\n  `Choice<(A_, B_, C_, D_, E_, F_, G_, H_, I_, J_, K_, L_, M_, N_, O_, P_, Q_, R_, S_, T_, U_, V_, W_, X_, Y_, Z_)>` implements `chumsky::Parser<'src, I, O, E>`\nand 110 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"3 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'a, &'a str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-14649946050272260555.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, ...> + Copy: Parser<'_, ..., ..., ...>` is not satisfied","spans":[{"byte_end":548,"byte_start":469,"column_end":102,"column_start":23,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `impl Trait`","span":{"byte_end":548,"byte_start":469,"column_end":102,"column_start":23,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":102,"highlight_start":23,"text":"pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {"}]}},"file_name":"src/token.rs","is_primary":true,"label":"unsatisfied trait bound","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":102,"highlight_start":23,"text":"pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {"}]},{"byte_end":1942,"byte_start":1836,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":"return type was inferred to be `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., _, _>, ..., _>` here","line_end":43,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    token"},{"highlight_end":44,"highlight_start":1,"text":"        .map_with(|tok, e| (tok, e.span()))"},{"highlight_end":18,"highlight_start":1,"text":"        .padded()"},{"highlight_end":20,"highlight_start":1,"text":"        .repeated()"},{"highlight_end":19,"highlight_start":1,"text":"        .collect()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, ...> + Copy: Parser<'_, ..., ..., ...>` is not satisfied\n  --> src/token.rs:15:23\n   |\n15 |   pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound\n...\n39 | /     token\n40 | |         .map_with(|tok, e| (tok, e.span()))\n41 | |         .padded()\n42 | |         .repeated()\n43 | |         .collect()\n   | |__________________- return type was inferred to be `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., _, _>, ..., _>` here\n   |\n   = help: the trait `chumsky::Parser<'_, &'a str, String, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>` is not implemented for `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<Rich<'a, char>, (), ()>> + Copy`\n   = help: the following other types implement trait `chumsky::Parser<'src, I, O, E>`:\n             `&T` implements `chumsky::Parser<'src, I, O, E>`\n             `AndIs<A, B, OB>` implements `chumsky::Parser<'src, I, OA, E>`\n             `AnyRef<I, E>` implements `chumsky::Parser<'src, I, &'src <I as chumsky::input::Input<'src>>::Token, E>`\n             `Arc<T>` implements `chumsky::Parser<'src, I, O, E>`\n             `Box<T>` implements `chumsky::Parser<'src, I, O, E>`\n             `Boxed<'src, '_, I, O, E>` implements `chumsky::Parser<'src, I, O, E>`\n             `Choice<&[A]>` implements `chumsky::Parser<'src, I, O, E>`\n             `Choice<(A_, B_, C_, D_, E_, F_, G_, H_, I_, J_, K_, L_, M_, N_, O_, P_, Q_, R_, S_, T_, U_, V_, W_, X_, Y_, Z_)>` implements `chumsky::Parser<'src, I, O, E>`\n           and 110 others\n   = note: required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 4 redundant requirements hidden\n   = note: required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: 1 redundant requirement hidden\n   = note: required for `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'a, &'a str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`\n   = note: the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-13670608721458395268.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `chumsky::Parser<'_, &'a str, String, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>` is not implemented for `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<Rich<'a, char>, (), ()>> + Copy`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `chumsky::Parser<'src, I, O, E>`:\n  `&T` implements `chumsky::Parser<'src, I, O, E>`\n  `AndIs<A, B, OB>` implements `chumsky::Parser<'src, I, OA, E>`\n  `AnyRef<I, E>` implements `chumsky::Parser<'src, I, &'src <I as chumsky::input::Input<'src>>::Token, E>`\n  `Arc<T>` implements `chumsky::Parser<'src, I, O, E>`\n  `Box<T>` implements `chumsky::Parser<'src, I, O, E>`\n  `Boxed<'src, '_, I, O, E>` implements `chumsky::Parser<'src, I, O, E>`\n  `Choice<&[A]>` implements `chumsky::Parser<'src, I, O, E>`\n  `Choice<(A_, B_, C_, D_, E_, F_, G_, H_, I_, J_, K_, L_, M_, N_, O_, P_, Q_, R_, S_, T_, U_, V_, W_, X_, Y_, Z_)>` implements `chumsky::Parser<'src, I, O, E>`\nand 110 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Map<impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, Full<..., (), ()>> + Copy, ..., ...>` to implement `chumsky::Parser<'_, &'a str, VToken, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"4 redundant requirements hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>` to implement `chumsky::Parser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>` to implement `chumsky::IterParser<'_, &'a str, (VToken, chumsky::span::SimpleSpan), chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., ..., ...>, ..., ...>` to implement `chumsky::Parser<'a, &'a str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'a, char>, (), ()>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/target/debug/deps/veridec-da5e848fb4eefa03.long-type-13670608721458395268.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `impl Parser<'_, &str, <&str as SliceInput<'_>>::Slice, ...> + Copy: Parser<'_, ..., ..., ...>` is not satisfied","spans":[{"byte_end":548,"byte_start":469,"column_end":102,"column_start":23,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/main.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `impl Trait`","span":{"byte_end":548,"byte_start":469,"column_end":102,"column_start":23,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":102,"highlight_start":23,"text":"pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {"}]}},"file_name":"src/token.rs","is_primary":true,"label":"unsatisfied trait bound","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":102,"highlight_start":23,"text":"pub fn lexer<'a>() -> impl Parser<'a, &'a str, Vec<(VToken, SimpleSpan)>, extra::Err<Rich<'a, char>>> {"}]},{"byte_end":1942,"byte_start":1836,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/token.rs","is_primary":false,"label":"return type was inferred to be `Collect<Repeated<Padded<MapWith<Or<Or<Choice<...>, ...>, ...>, ..., ...>>, ..., _, _>, ..., _>` here","line_end":43,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    token"},{"highlight_end":44,"highlight_start":1,"text":"        .map_with(|tok, e| (tok, e.span()))"},{"highlight_end":18,"highlight_start":1,"text":"        .padded()"},{"highlight_end":20,"highlight_start":1,"text":"        .repeated()"},{"highlight_end":19,"highlight_start":1,"text":"        .collect()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `parse_recovery` found for opaque type `impl chumsky::Parser<'_, &str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'_, char>, (), ()>>` in the current scope\n  --> src/main.rs:21:38\n   |\n21 |     let (tokens, lex_errs) = lexer().parse_recovery(&src);\n   |                                      ^^^^^^^^^^^^^^ method not found in `impl Parser<'_, &str, Vec<(VToken, SimpleSpan)>, Full<Rich<'_, char>, (), ()>>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `parse_recovery` found for opaque type `impl chumsky::Parser<'_, &str, Vec<(VToken, chumsky::span::SimpleSpan)>, chumsky::extra::Full<chumsky::error::Rich<'_, char>, (), ()>>` in the current scope","spans":[{"byte_end":544,"byte_start":530,"column_end":52,"column_start":38,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"method not found in `impl Parser<'_, &str, Vec<(VToken, SimpleSpan)>, Full<Rich<'_, char>, (), ()>>`","line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":38,"text":"    let (tokens, lex_errs) = lexer().parse_recovery(&src);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `parse_recovery` found for opaque type `impl Parser<'_, &[(VToken, SimpleSpan)], Module, Full<Rich<'_, VToken>, (), ()>>` in the current scope\n  --> src/main.rs:31:25\n   |\n31 |         module_parser().parse_recovery(stream)\n   |                         ^^^^^^^^^^^^^^ method not found in `impl Parser<'_, &[(VToken, SimpleSpan)], Module, Full<Rich<'_, VToken>, (), ()>>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `parse_recovery` found for opaque type `impl Parser<'_, &[(VToken, SimpleSpan)], Module, Full<Rich<'_, VToken>, (), ()>>` in the current scope","spans":[{"byte_end":1007,"byte_start":993,"column_end":39,"column_start":25,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"method not found in `impl Parser<'_, &[(VToken, SimpleSpan)], Module, Full<Rich<'_, VToken>, (), ()>>`","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":25,"text":"        module_parser().parse_recovery(stream)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0271, E0277, E0432, E0433, E0599, E0631.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0271, E0277, E0432, E0433, E0599, E0631.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs#veridec@0.1.0","manifest_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"veridec","src_path":"/Users/riccardo/Sources/GitHub/VerilogSee/veriscript-rs/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0271`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0271`.","spans":[]}}
{"reason":"build-finished","success":false}
